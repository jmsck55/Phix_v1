--
-- demo/capture_console.exw
--
--  see also child.ex
--  DEV: not quite right on linux: doubles-up on output, hangs on eof (fudge below [find '!'])
--       Update 18/2/21: it is now quite badly broken on Linux; there have been significant
--                       changes to c_func() and the like on linux in the past 3 months...
--
include builtins\pipeio.e

procedure WriteToPipe(integer infd, atom hPipe)
-- Read from a file and write its contents to the pipe for the child's stdin.
-- Stop when there is no more data. 
    while true do
        object x = gets(infd)
        if atom(x) then exit end if
        if not write_to_pipe(hPipe,x) then exit end if
    end while
end procedure

procedure ReadFromPipe(atom hPipe, hProc) 
-- Read output from the child process's pipe for stdout
-- and write to (the parent process's pipe for) stdout. 
-- Stop when there is no more data. 
    while true do
        object buff = read_from_pipe(hPipe,hProc)
        if buff=-1 then exit end if
        puts(1,buff)
--DEV/fudge...
        if platform()=LINUX then
            if find('!',buff) then exit end if
        end if
    end while
end procedure

procedure main()
 
    printf(1,"\n->Start of parent execution.\n");

    -- Create pipes for the child process's stdin/out/err. 
 
    sequence pipes = repeat(0,3)
    -- You can comment out one or more of these...
    pipes[PIPEIN] = create_pipe(INHERIT_WRITE)
    pipes[PIPOUT] = create_pipe(INHERIT_READ)
    pipes[PIPERR] = create_pipe(INHERIT_READ)

    -- Create the child process, with replacement stdin/stdout/stderr. 
    string cmd = iff(platform()=WINDOWS?`..\p child.ex`:"./p child")
--  string cmd = iff(platform()=WINDOWS?`dir`:"./p child")

    atom hProc = system_exec(cmd, 12, pipes)

    if sequence(pipes[PIPEIN]) then -- (not commented out above)
        -- Use any (plain text) input file to verify the data flow.
        string filename = "child.ex"
        integer infd = open(filename,"r")
        if infd=-1 then crash("cannot open %s",{filename}) end if

        -- Write to the pipe that is the standard input for a child process. 
        -- Data is written to the pipe's buffers, so it is not necessary to wait
        -- until the child process is running before writing data.
 
        WriteToPipe(infd,pipes[PIPEIN][WRITE_PIPE])
        close(infd)
        -- Close the pipe handle so the child process stops reading. 
        pipes[PIPEIN][WRITE_PIPE] = close_handles(pipes[PIPEIN][WRITE_PIPE])

        printf(1,"\n->Contents of %s written to child stdin pipe.\n", {filename})
    end if

    -- (you can start the child process before or after writing to pipes)
--  atom hProc = system_exec(cmd, 12, pipes)  -- (12 === shell + nowait)

    if sequence(pipes[PIPOUT]) then -- (not commented out above)
        -- Read from pipe that is the standard output for child process. 
        printf(1,"\n->Contents of child process stdout:\n\n")
        ReadFromPipe(pipes[PIPOUT][READ_PIPE],hProc)
    end if

    if sequence(pipes[PIPERR]) then -- (not commented out above)
        -- Read from pipe that is the error output for child process. 
        printf(1,"\n->Contents of child process stderr:\n\n")
        ReadFromPipe(pipes[PIPERR][READ_PIPE],hProc)
    end if

    printf(1,"\n->End of parent execution.\n")

    if platform()=WINDOWS then
        hProc = close_handles(hProc)
    end if

    -- The remaining open handles are cleaned up when this process terminates. 
    -- To avoid resource leaks in a larger application, close handles explicitly. 
    pipes = close_handles(pipes)

end procedure
main()
?"done"
{} = wait_key()


