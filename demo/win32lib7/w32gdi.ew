--/topic Constant
--/const gdi32
--/desc Windows Library: Graphic Device Interface (drawing, text, etc)

global constant
    gdi32       = registerw32Library("gdi32.dll"),     -- graphic device interface

    xGetStockObject     = registerw32Function(gdi32, "GetStockObject", {C_INT}, C_POINTER),
-- device context
    xSelectObject       = registerw32Function(gdi32, "SelectObject", {C_POINTER, C_POINTER}, C_POINTER),
    xCreateDC           = registerw32Function(gdi32, "CreateDCA", repeat( C_POINTER, 4 ), C_POINTER),
    xCreateIC           = registerw32Function(gdi32, "CreateICA", repeat( C_POINTER, 4 ), C_POINTER),
    xMoveToEx           = registerw32Function(gdi32, "MoveToEx", {C_POINTER, C_INT, C_INT, C_POINTER}, C_LONG),
-- graphics
    xCreatePen          = registerw32Function(gdi32, "CreatePen", {C_INT, C_INT, C_LONG}, C_POINTER),
    xCreateSolidBrush   = registerw32Function(gdi32, "CreateSolidBrush", {C_POINTER}, C_POINTER),
    xCreateHatchBrush   = registerw32Function(gdi32, "CreateHatchBrush", {C_UINT,C_POINTER}, C_POINTER),
    xCreatePatternBrush   = registerw32Function(gdi32, "CreatePatternBrush", {C_POINTER}, C_POINTER),
    xLineTo             = registerw32Function(gdi32, "LineTo", {C_POINTER, C_INT, C_INT}, C_LONG),
    xGetPixel           = registerw32Function(gdi32, "GetPixel", {C_POINTER, C_INT, C_INT}, C_LONG),
    xSetPixel           = registerw32Function(gdi32, "SetPixel", {C_POINTER, C_INT, C_INT, C_LONG}, C_LONG),
    xRectangle          = registerw32Function(gdi32, "Rectangle", {C_POINTER, C_INT, C_INT, C_INT, C_LONG}, C_LONG),
    xRoundRect          = registerw32Function(gdi32, "RoundRect", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xEllipse            = registerw32Function(gdi32, "Ellipse", {C_POINTER, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xArc                = registerw32Function(gdi32, "Arc", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xChord              = registerw32Function(gdi32, "Chord", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xPie                = registerw32Function(gdi32, "Pie", {C_POINTER, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT, C_INT}, C_LONG),
    xPolygon            = registerw32Function(gdi32, "Polygon", {C_POINTER, C_POINTER, C_INT}, C_LONG),
-- text
    xTextOut            = registerw32Procedure(gdi32, "TextOutA", {C_POINTER, C_INT, C_INT, C_POINTER, C_INT}),
-- used by EZ_FONT
    xSaveDC             = registerw32Function(gdi32, "SaveDC", {C_POINTER}, C_INT),
    xSetGraphicsMode    = registerw32Function(gdi32, "SetGraphicsMode", {C_POINTER, C_INT}, C_INT),
    xModifyWorldTransform = registerw32Function(gdi32, "ModifyWorldTransform", {C_POINTER, C_POINTER, C_LONG}, C_LONG),
    xSetViewportOrgEx   = registerw32Function(gdi32, "SetViewportOrgEx", {C_POINTER, C_INT, C_INT, C_POINTER}, C_LONG),
    xSetWindowOrgEx     = registerw32Function(gdi32, "SetWindowOrgEx", {C_POINTER, C_INT, C_INT, C_POINTER}, C_LONG),
    xSetViewportExtEx   = registerw32Function(gdi32, "SetViewportExtEx", {C_LONG,C_INT,C_INT,C_INT},C_INT),
    xSetWindowExtEx     = registerw32Function(gdi32, "SetWindowExtEx",{C_LONG,C_INT,C_INT,C_POINTER},C_INT),
    xGetDeviceCaps      = registerw32Function(gdi32, "GetDeviceCaps", {C_POINTER, C_INT}, C_INT),
    xDPtoLP             = registerw32Function(gdi32, "DPtoLP", {C_POINTER, C_POINTER, C_INT}, C_LONG),
    xCreateFontIndirect = registerw32Function(gdi32, "CreateFontIndirectA", {C_POINTER}, C_POINTER),
    xGetTextMetrics     = registerw32Function(gdi32, "GetTextMetricsA", {C_POINTER, C_POINTER}, C_LONG),
    xGetOutlineTextMetrics     = registerw32Function(gdi32, "GetOutlineTextMetricsA", {C_POINTER, C_INT, C_POINTER}, C_LONG),
    xDeleteObject       = registerw32Function(gdi32, "DeleteObject", {C_POINTER}, C_LONG),
    xRestoreDC          = registerw32Function(gdi32, "RestoreDC", {C_POINTER, C_INT}, C_LONG),
    xGetTextExtentPoint = registerw32Function(gdi32, "GetTextExtentPoint32A", {C_POINTER, C_POINTER, C_INT, C_POINTER}, C_LONG),
-- graphic modes
    xSetMapMode         = registerw32Function(gdi32, "SetMapMode", {C_POINTER, C_INT}, C_INT),
    xGetMapMode         = registerw32Function(gdi32, "GetMapMode", {C_POINTER}, C_INT),
    xGetObject          = registerw32Function(gdi32, "GetObjectA", {C_POINTER, C_INT, C_POINTER}, C_POINTER),
    xGetObjectType      = registerw32Function(gdi32, "GetObjectType", {C_POINTER}, C_INT),
    xCreatePalette      = registerw32Function(gdi32, "CreatePalette", {C_POINTER}, C_POINTER),
-- bitmap graphics
    xGetWindowExtEx     = registerw32Function(gdi32, "GetWindowExtEx", {C_POINTER, C_POINTER}, C_POINTER),
    xCreateCompatibleBitmap = registerw32Function(gdi32, "CreateCompatibleBitmap", {C_POINTER, C_INT, C_INT}, C_POINTER),
    xSetBitmapBits      = registerw32Function(gdi32, "SetBitmapBits", {C_POINTER, C_LONG, C_POINTER}, C_LONG),
    xSelectPalette      = registerw32Function(gdi32, "SelectPalette", {C_POINTER, C_POINTER, C_LONG}, C_POINTER),
    xRealizePalette     = registerw32Function(gdi32, "RealizePalette", {C_POINTER}, C_UINT),
    xSetDIBitsToDevice  = registerw32Function(gdi32, "SetDIBitsToDevice", {C_POINTER, C_INT, C_INT, C_LONG, C_LONG, C_INT, C_INT, C_UINT, C_UINT, C_POINTER, C_POINTER, C_UINT}, C_INT),
    xStretchDIBits      = registerw32Function(gdi32, "StretchDIBits", {C_POINTER,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_POINTER,C_UINT,C_LONG},C_INT),
    xBitBlt             = registerw32Function(gdi32, "BitBlt", {C_POINTER,C_INT,C_INT,C_INT,C_INT,C_POINTER,C_INT,C_INT,C_LONG},C_LONG),
    xSetROP2            = registerw32Function(gdi32, "SetROP2", {C_POINTER, C_LONG}, C_LONG ),
    xCreateCompatibleDC = registerw32Function(gdi32, "CreateCompatibleDC", {C_POINTER}, C_POINTER),
    xDeleteDC           = registerw32Function(gdi32, "DeleteDC", {C_POINTER}, C_POINTER),
    xCreateBitmap       = registerw32Function(gdi32, "CreateBitmap", {C_INT, C_INT, C_UINT, C_UINT, C_POINTER}, C_POINTER),
    xCreateBitmapIndirect = registerw32Function(gdi32, "CreateBitmapIndirect", {C_POINTER}, C_POINTER),
    xCreateDIBitmap     = registerw32Function(gdi32, "CreateDIBitmap", {C_POINTER, C_POINTER, C_LONG, C_LONG, C_POINTER, C_LONG}, C_POINTER ),
    xStretchBlt         = registerw32Function(gdi32, "StretchBlt",{ C_LONG,C_UINT,C_UINT,C_UINT,C_UINT,C_LONG,C_UINT,C_UINT,C_UINT,C_UINT,C_LONG},C_POINTER),
    xExtFloodFill       = registerw32Function(gdi32, "ExtFloodFill",{ C_POINTER,C_INT,C_INT,C_UINT,C_UINT},C_UINT),

-- extending the text attributes
    xSetTextColor       = registerw32Function(gdi32, "SetTextColor", {C_POINTER, C_LONG}, C_LONG),
    xSetTextAlign       = registerw32Function(gdi32, "SetTextAlign", {C_POINTER, C_UINT}, C_UINT),
    xSetTextJustification = registerw32Function(gdi32, "SetTextJustification", {C_POINTER, C_INT, C_INT}, C_LONG),
    xSetBkColor         = registerw32Function(gdi32, "SetBkColor", {C_POINTER, C_LONG}, C_LONG),
    xSetBkMode          = registerw32Function(gdi32, "SetBkMode", {C_POINTER, C_INT}, C_INT),
    xGetBkColor         = registerw32Function(gdi32, "GetBkColor", {C_POINTER}, C_LONG),
    xStartDoc           = registerw32Function(gdi32, "StartDocA", {C_LONG, C_POINTER}, C_LONG),
    xStartPage          = registerw32Function(gdi32, "StartPage", {C_LONG}, C_LONG),
    xEndPage            = registerw32Function(gdi32, "EndPage", {C_LONG}, C_LONG),
    xEndDoc             = registerw32Function(gdi32, "EndDoc", {C_LONG}, C_LONG),
    xAbortDoc           = registerw32Function(gdi32, "AbortDoc", {C_LONG}, C_LONG),
-- position of windows
    xGetViewportOrgEx   = registerw32Function(gdi32, "GetViewportOrgEx", {C_POINTER, C_POINTER}, C_LONG),
    xGetDIBits          = registerw32Function( gdi32, "GetDIBits",{ C_LONG, C_LONG, C_UINT, C_UINT, C_LONG, C_LONG, C_UINT }, C_LONG ),
    xCreateRectRgn      = registerw32Function(gdi32, "CreateRectRgn", {C_LONG, C_LONG,C_LONG,C_LONG},C_POINTER),
    xGetCurrentObject   = registerw32Function(gdi32, "GetCurrentObject", {C_LONG, C_LONG},C_POINTER),
    xLPtoDP=registerw32Function(gdi32,"LPtoDP",{C_POINTER,C_POINTER,C_LONG},C_LONG),


    OBJ_PEN            = 1,
    OBJ_BRUSH          = 2,
    OBJ_DC             = 3,
    OBJ_METADC         = 4,
    OBJ_PAL            = 5,
    OBJ_FONT           = 6,
    OBJ_BITMAP         = 7,
    OBJ_REGION         = 8,
    OBJ_METAFILE       = 9,
    OBJ_MEMDC          = 10,
    OBJ_EXTPEN         = 11,
    OBJ_ENHMETADC      = 12,
    OBJ_ENHMETAFILE    = 13,
    OBJ_COLORSPACE     = 14,

    FLOODFILLBORDER    = 0,
    FLOODFILLSURFACE   = 1,

    MM_TEXT            = 1,
    MM_LOMETRIC        = 2,
    MM_HIMETRIC        = 3,
    MM_LOENGLISH       = 4,
    MM_HIENGLISH       = 5,
    MM_TWIPS           = 6,
    MM_ISOTROPIC       = 7,
    MM_ANISOTROPIC     = 8,
    MM_MIN             = MM_TEXT,
    MM_MAX             = MM_ANISOTROPIC,
    MM_MAX_FIXEDSCALE  = MM_TWIPS

global constant
-- Stock Logical Objects
    WHITE_BRUSH = 0,
    LTGRAY_BRUSH = 1,
    GRAY_BRUSH = 2,
    DKGRAY_BRUSH = 3,
    BLACK_BRUSH = 4,
    NULL_BRUSH = 5,
    HOLLOW_BRUSH = NULL_BRUSH,
    WHITE_PEN = 6,
    BLACK_PEN = 7,
    NULL_PEN = 8,
    OEM_FIXED_FONT = 10,
    ANSI_FIXED_FONT = 11,
    ANSI_VAR_FONT = 12,
    SYSTEM_FONT = 13,
    DEVICE_DEFAULT_FONT = 14,
    DEFAULT_PALETTE = 15,
    SYSTEM_FIXED_FONT = 16,
    
    brush_white = w32Func( xGetStockObject, {WHITE_BRUSH}),
    brush_ltgray = w32Func( xGetStockObject, {LTGRAY_BRUSH}),
    brush_gray = w32Func( xGetStockObject, {GRAY_BRUSH}),
    brush_dkgray = w32Func( xGetStockObject, {DKGRAY_BRUSH}),
    brush_black = w32Func( xGetStockObject, {BLACK_BRUSH}),
    brush_null = w32Func( xGetStockObject, {NULL_BRUSH}),
    pen_white = w32Func( xGetStockObject, {WHITE_PEN}),
    pen_black = w32Func( xGetStockObject, {BLACK_PEN}),
    pen_null = w32Func( xGetStockObject, {NULL_PEN}),
    font_oem_fixed = w32Func( xGetStockObject, {OEM_FIXED_FONT}),
    font_ansi_fixed = w32Func( xGetStockObject, {ANSI_FIXED_FONT}),
    font_ansi_var = w32Func( xGetStockObject, {ANSI_VAR_FONT}),
    font_system = w32Func( xGetStockObject, {SYSTEM_FONT}),
    font_device_default = w32Func( xGetStockObject, {DEVICE_DEFAULT_FONT}),
    palette_default = w32Func( xGetStockObject, {DEFAULT_PALETTE}),
    font_system_fixed = w32Func( xGetStockObject, {SYSTEM_FIXED_FONT})
global constant
    STOCK_LAST = 16,
    -- null brush
    NullBrushID     = w32Func( xGetStockObject, { NULL_BRUSH } ),
    -- default pen
    DefaultPenID    = w32Func( xGetStockObject, {BLACK_PEN})

