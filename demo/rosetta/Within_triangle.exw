--
-- demo/rosetta/Within_triangle.exw
-- ================================
--
--  Some experiments for https://rosettacode.org/wiki/Find_if_a_point_is_within_a_triangle
--  I only uploaded the convex hull and simplest translation of python, ie side() & iswithin(),
--  but not the somewhat more convoluted mpq_ versions (even though it works just fine)....
--
--from https://rosettacode.org/wiki/Convex_hull#Phix
enum x, y
function ccw(sequence a, b, c)
    return (b[x] - a[x]) * (c[y] - a[y])
         > (b[y] - a[y]) * (c[x] - a[x])
end function
 
function convex_hull(sequence points)
    sequence h = {}
    points = sort(points)
 
    /* lower hull */
    for i=1 to length(points) do
        while length(h)>=2
          and not ccw(h[$-1], h[$], points[i]) do
            h = h[1..$-1]
        end while
        h = append(h, points[i])
    end for
 
    /* upper hull */
    for i=length(points) to 1 by -1 do
        while length(h)>=2
          and not ccw(h[$-1],h[$],points[i]) do
            h = h[1..$-1]
        end while
        h = append(h, points[i])
    end for
 
    h = h[1..$-1]
    return h
end function
 
--constant points = {{16,  3}, {12, 17}, { 0,  6}, {-4, -6}, {16,  6},
--                 {16, -7}, {16, -3}, {17, -4}, { 5, 19}, {19, -8},
--                 { 3, 16}, {12, 13}, { 3, -4}, {17,   5}, {-3, 15},
--                 {-3, -9}, { 0, 11}, {-9, -3}, {-4, -2}, {12, 10}}
--printf(1,"Convex Hull: %v\n",{convex_hull(points)})

?"convex hull"

constant point = {0,0},
         point2 = {0,1},    
         point3 = {3,1},    
         triangle = {{3/2, 12/5}, {51/10, -31/10}, {-19/5, 1/2}}
printf(1,"Point %v is with triangle %v?:%t\n",{point,triangle,length(convex_hull({point}&triangle))=3})
printf(1,"Point %v is with triangle %v?:%t\n",{point2,triangle,length(convex_hull({point2}&triangle))=3})
printf(1,"Point %v is with triangle %v?:%t\n",{point3,triangle,length(convex_hull({point3}&triangle))=3})

?"convex hull applied to totologic problem)"
--Example 1*:
--We consider the triangle T defined by 3 points p1(x1, y1), p2(x2, y2), p3(x3, y3) with values :

constant x1 = 1/10,
         y1 = 1/9,
         x2 = 100/8,
         y2 = 100/3,
         x3 = 100/4,
         y3 = 100/9,
         t1 = {{x1,y1},{x2,y2},{x3,y3}},
         -- and a single point p(x, y) lying exactly on the segment [p1, p2] :
         px = x1 + (3/7)*(x2 - x1),
         py = y1 + (3/7)*(y2 - y1),
         p1 = {px,py}
sequence ch = convex_hull({p1}&t1)
bool res = length(ch)=3
printf(1,"point %v is with triangle %v?:%t\n",{p1,t1,res})

constant t2 = {{x1,y1},{x2,y2},{-100/8,100/6}}
sequence ch2 = convex_hull({p1}&t2)
bool res2 = length(ch2)=3
printf(1,"point %v is with triangle %v?:%t\n",{p1,t2,res2}) -- fails...

?"trans python (also applied to totologic problem)"
--function side(atom x1, y1, x2, y2, x3, y3)
    -- which side of plane cut by line ({x2,y2}, {x3,y3}) is {x1,y1} on?
function side(sequence p1, p2, p3)
    -- which side of plane cut by line (p2, p3) is p1 on?
    atom {x1, y1} = p1,
         {x2, y2} = p2,
         {x3, y3} = p3
    return (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)
--  return (pt1.x - pt3.x) * (pt2.y - pt3.y) - (pt2.x - pt3.x) * (pt1.y - pt3.y)
end function 
 
--function iswithin(sequence point, pt1, pt2, pt3)
function iswithin(sequence point, triangle)
--
--  Determine if point is within triangle formed by points p1, p2, p3.
--  If so, the point will be on the same side of each of the half planes
--  defined by vectors p1p2, p2p3, and p3p1. zval is positive if outside,
--  negative if inside such a plane. All should be positive or all negative
--  if point is within the triangle.
--
    sequence {pt1, pt2, pt3} = triangle
    atom zval1 = side(point, pt1, pt2),
         zval2 = side(point, pt2, pt3),
         zval3 = side(point, pt3, pt1)
    bool notanyneg = zval1 >= 0 and zval2 >= 0 and zval3 >= 0,
         notanypos = zval1 <= 0 and zval2 <= 0 and zval3 <= 0
    return notanyneg or notanypos
end function 

printf(1,"point %v is with triangle %v?:%t\n",{point,triangle,iswithin(point,triangle)})
printf(1,"point %v is with triangle %v?:%t\n",{p1,t1,iswithin(p1,t1)})
printf(1,"point %v is with triangle %v?:%t\n",{p1,t2,iswithin(p1,t2)})

?"trans python (applied to simple problem)"

sequence p4 = {0,0},
         p5 = {0,1},    
         p6 = {3,1},    
         t4 = {{1.5, 2.4}, {5.1, -3.1}, {-3.8, 0.5}}
printf(1,"point %v is with triangle %v?:%t\n",{p4,t4,iswithin(p4,t4)})
printf(1,"point %v is with triangle %v?:%t\n",{p5,t4,iswithin(p5,t4)})
printf(1,"point %v is with triangle %v?:%t\n",{p6,t4,iswithin(p6,t4)})

--Point (0, 0) is within triangle (1.5, 2.4), (5.1, -3.1), (-3.8, 0.5): True
--Point (0, 1) is within triangle (1.5, 2.4), (5.1, -3.1), (-3.8, 0.5): True
--Point (3, 1) is within triangle (1.5, 2.4), (5.1, -3.1), (-3.8, 0.5): False

?"--== using rationals ==="
--(overcomes the accuracy problems on the totologic link, which neither of the above manage)
include mpfr.e

function mpq_side(sequence p1, p2, p3)
    -- which side of plane cut by line (p2, p3) is p1 on?
    mpq {x1, y1} = p1,
        {x2, y2} = p2,
        {x3, y3} = p3,
        {t1,t2,t3} = mpq_inits(3)
--  return (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)
    mpq_sub(t1,x1,x3)
    mpq_sub(t3,y2,y3)
    mpq_mul(t1,t1,t3)
    mpq_sub(t2,x2,x3)
    mpq_sub(t3,y1,y3)
    mpq_mul(t2,t2,t3)
    mpq_sub(t1,t1,t2)
    return mpq_cmp_si(t1,0,1)
--  return (pt1.x - pt3.x) * (pt2.y - pt3.y) - (pt2.x - pt3.x) * (pt1.y - pt3.y)
end function 
 
--function iswithin(sequence point, pt1, pt2, pt3)
function mpq_iswithin(sequence point, triangle)
--
--  Determine if point is within triangle formed by points p1, p2, p3.
--  If so, the point will be on the same side of each of the half planes
--  defined by vectors p1p2, p2p3, and p3p1. zval is positive if outside,
--  negative if inside such a plane. All should be positive or all negative
--  if point is within the triangle.
--
    sequence {pt1, pt2, pt3} = triangle
    integer c1 = mpq_side(point, pt1, pt2),
            c2 = mpq_side(point, pt2, pt3),
            c3 = mpq_side(point, pt3, pt1)
    bool notanyneg = c1 >= 0 and c2 >= 0 and c3 >= 0,
         notanypos = c1 <= 0 and c2 <= 0 and c3 <= 0
    return notanyneg or notanypos
end function 

function qp(sequence qs)
    for i=1 to length(qs) do
        object qi = qs[i]
        if sequence(qi) then
            qs[i] = qp(qi)
        else
            mpz {n,d} = mpz_inits(2)
            mpq_get_num(n,qi)
            mpq_get_den(d,qi)
            string ns = mpz_get_str(n),
                   ds = mpz_get_str(d)
            qs[i] = ns&"/"&ds
        end if
    end for
    return "{"&join(qs,",")&"}"
end function

procedure rational_test()
--Example 1*:
--We consider the triangle T defined by 3 points p1(x1, y1), p2(x2, y2), p3(x3, y3) with values :
    mpq x1 = mpq_init_set_si(1,10),
        y1 = mpq_init_set_si(1,9),
        x2 = mpq_init_set_si(100,8),
        y2 = mpq_init_set_si(100,3),
        x3 = mpq_init_set_si(100,4),
        y3 = mpq_init_set_si(100,9),
        x4 = mpq_init_set_si(-100,8),
        y4 = mpq_init_set_si(100,6),
        {px,py} = mpq_inits(2),
        t7 = mpq_init_set_si(3,7)
    sequence t1 = {{x1,y1},{x2,y2},{x3,y3}},
             t2 = {{x1,y1},{x2,y2},{x4,y4}}
-- and a single point p(x, y) lying exactly on the segment [p1, p2] :
    mpq_sub(px,x2,x1)
    mpq_mul(px,px,t7)
    mpq_add(px,px,x1)
    mpq_sub(py,y2,y1)
    mpq_mul(py,py,t7)
    mpq_add(py,py,y1)
--       px = x1 + (3/7)*(x2 - x1),
--       py = y1 + (3/7)*(y2 - y1),
    sequence pt = {px,py}
    printf(1,"point %v is with triangle %v?:%t\n",{qp(pt),qp(t1),mpq_iswithin(pt,t1)})
    printf(1,"point %v is with triangle %v?:%t\n",{qp(pt),qp(t2),mpq_iswithin(pt,t2)})
end procedure
rational_test()

?"done"
{} = wait_key()
abort(0)

