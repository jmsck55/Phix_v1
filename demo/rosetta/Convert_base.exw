--
-- demo\rosetta\Convert_base.exw
-- =============================
--
--  to_base(integer i, base) takes a [decimal] integer and returns a string in the specified base.
--  from_base(string s, integer base) takes a string in the specified base and returns a [decimal] integer.
--
function to_base(integer i, integer base)
integer c
sequence s = ""
    while i>0 do
        c = remainder(i,base)
        if c<10 then
            c += '0'
        else
            c += 'a'-10
        end if
        s = prepend(s,c)
        i = floor(i/base)
    end while
 
    if length(s) = 0 then
        s = "0"
    end if
 
    return s
end function
 
function from_base(string s, integer base)
integer res = 0, c
    for i=1 to length(s) do
        c = s[i]
        if c>='0' and c<='9' then
            c -= '0'
        else
            c -= 'a'-10
        end if
        res = res*base+c
    end for
    return res
end function
 
?to_base(256,16)
?from_base("100",16)
?"done"
{} = wait_key()

--The following also handles fractions:
--/*
--http://rosettacode.org/wiki/Decimal_floating_point_number_to_binary#Phix
--=={{header|Phix}}==
--Handles bases 2..36. Does not handle any form of scientific notation.
--<lang Phix>
function dec_to(atom d, integer base)
-- convert d to a string in the specified base
-- eg dec_to(65535,16) => "FFFF"
    bool neg = d<0
    if neg then d = -d end if
    string res = ""
    integer whole = floor(d)
    d -= whole
    while true do
        integer ch = mod(whole,base)
        ch += iff(ch>9?'A'-10:'0')
        res = ch&res
        whole = floor(whole/base)
        if whole=0 then exit end if
    end while
    if d>0 then
        res &= '.'
        while d>0 do
            d *= base
            integer digit = floor(d)
            d -= digit
            digit += iff(digit>9?'A'-10:'0')
            res &= digit
        end while
    end if
    if neg then res = '-'&res end if
    return res
end function

function to_dec(string s, integer base)
-- convert the string s (in the specified base) 
-- back into a normal decimal/floating point.
-- eg to_dec("FFFF",16) => 65535
    bool neg = (s[1]='-')
    if neg then s = s[2..$] end if
    integer dot = find('.',s)
    if dot then s[dot..dot] = "" end if
    atom res = 0
    for i=1 to length(s) do
        integer digit = upper(s[i])
        digit -= iff(ch>='A'?'A'-10:'0')
        res = res*base + digit
    end for
    if dot then res /= power(base,length(s)-dot+1) end if
    if neg then res = -res end if
    return res
end function

procedure test(atom f, integer base=2)
    string s = dec_to(f,base)
    printf(1,"%.8g => 0(%d):%s\n", {f, base, s})
    f = to_dec(s,base)
    printf(1,"0(%d):%s => %.8g\n", {base, s, f})
end procedure
test(23.34375)
test(-23.34375)
test(11.90625)
test(-11.90625)
test(13)
test(0.1)
test(-5)
test(-0.25)
test(0)
test(65535,16)
?to_dec("23.7",10)
?dec_to(23.7,10)
--test(9.01)
--test(9)
--test(0.01)
--/*
"started"
23.34375 => 0(2):10111.01011
0(2):10111.01011 => 23.34375
-23.34375 => 0(2):-10111.01011
0(2):-10111.01011 => -23.34375
11.90625 => 0(2):1011.11101
0(2):1011.11101 => 11.90625
-11.90625 => 0(2):-1011.11101
0(2):-1011.11101 => -11.90625
13 => 0(2):1101
0(2):1101 => 13
0.1 => 0(2):0.0001100110011001100110011001100110011001100110011001101
0(2):0.0001100110011001100110011001100110011001100110011001101 => 0.1
-5 => 0(2):-101
0(2):-101 => -5
-0.25 => 0(2):-0.01
0(2):-0.01 => -0.25
0 => 0(2):0
0(2):0 => 0
65535 => 0(16):FFFF
0(16):FFFF => 65535
23.7
"23.699999999999999289457264239899814128875732421875"
</pre>
Aside: I was quite surprised to get 100% accuracy on these tests, but actually it is more of
a lucky coincidence in the way it is written, as the last test shows. The truth of the matter
is simply that you can extract a float to a binary text representation exactly, in a way that 
you just cannot do for most other (ie non-power-2) bases.
--*/
--*/

--and another one (positive integer only[?]):
-- (could perhaps be made to convert a string in any base to any other base...?)
-- (note this may be a tad slow: it performs string-maths - converting a 100-digit
--  input string is likely to perform some 10,000 individual mod and floor_div ops.
--  On the plus side it can theoretically handle 800 million+ digits with perfect
--  accuracy, far more on 64 bit, if you have enough RAM and patience that is ;-)
--/*
function to_base(string s, integer base)
-- convert the string s in base 10 to the specified base
-- eg to_dec("65535",16) => "FFFF"
--  bool neg = (s[1]='-')
--  if neg then s = s[2..$] end if
--  integer dot = find('.',s)
--  if dot then s[dot..dot] = "" end if
--  atom res = 0
--trace(1)
    string res = "" 
    while length(s) do
        integer q = 0, r = 0, digit
        for i=1 to length(s) do
            digit = upper(s[i])
            digit -= iff(digit>='A'?'A'-10:'0')
            q = q*10+digit
            r = mod(q,base)
            q = floor(q/base)
            q += iff(q>10?'A'-10:'0')
            s[i] = q
            q = r
        end for
--      res = res*base + digit
        r += iff(r>10?'A'-10:'0')
--nb: I was working with palindromes....
        res &= r
        while length(s) and s[1]='0' do
            s = s[2..$]
        end while
    end while
--  if dot then res /= power(base,length(s)-dot+1) end if ??
--  if neg then res = '-'&res end if [?not tested?]
    return res
end function
--*/

