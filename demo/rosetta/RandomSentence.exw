--
-- demo/rosetta/RandomSentence.exw
-- ===============================
--
include builtins\libcurl.e
constant url =  "http://www.gutenberg.org/files/36/36-0.txt",
         filename = "war_of_the_worlds.txt",
         fsent = "No one would have believed",
         lasts = "End of the Project Gutenberg EBook",
         unicodes = {utf32_to_utf8({#2019}),    -- rsquo
                     utf32_to_utf8({#2014})},   -- hyphen
         asciis = {"'","-"},
         aleph = tagset('Z','A')&tagset('z','a')&tagset('9','0')&",'.?! ",
         follow = new_dict(),   -- {word}      -> {words,counts}
         follow2 = new_dict()   -- {word,word} -> {words,counts}

if not file_exists(filename) then
    printf(1,"Downloading %s...\n",{filename})
    CURLcode res = curl_easy_get_file(url,"",filename)
    if res!=CURLE_OK then crash("cannot download") end if
end if
string text = get_text(filename)
text = text[match(fsent,text)..match(lasts,text)-1]
text = substitute_all(text,unicodes,asciis)
text = substitute_all(text,".?!-\n",{" ."," ? "," ! "," "," "})
text = filter(text,"in",aleph)
sequence words = split(text)

procedure account(sequence words)
    string next = words[$]
    words = words[1..$-1]
    for i=length(words) to 1 by -1 do
        integer d = {follow,follow2}[i]
        sequence t = getdd(words,{{},{}},d)
        integer tk = find(next,t[1])
        if tk=0 then
            t[1] = append(t[1],next)
            t[2] = append(t[2],1)
        else
            t[2][tk] += 1
        end if
        setd(words,t,d)
        words = words[2..$]
        if words!={"."} then exit end if -- (may as well quit)
    end for
end procedure

for i=2 to length(words) do
    if find(words[i],{".","?","!"})
    and i<length(words) then
        words[i+1] = lower(words[i+1])
    end if
    account(words[max(1,i-2)..i])
end for

function weighted_random_pick(sequence words, integer dict)
    sequence t = getd(words,dict)
    integer total = sum(t[2]),
            r = rand(total)
    for i=1 to length(t[2]) do
        r -= t[2][i]
        if r<=0 then
            return t[1][i]
        end if
    end for
end function

for i=1 to 5 do
    sequence sentence = {".",weighted_random_pick({"."},follow)}
    while true do
        string next = weighted_random_pick(sentence[-2..-1],follow2)
        sentence = append(sentence,next)
        if find(next,{".","?","!"}) then exit end if
    end while
    sentence[2][1] = upper(sentence[2][1])
    sentence = join(sentence[2..$-1])&sentence[$]
--  if match("soj",sentence) then
        printf(1,"%s\n",{sentence})
--  end if
end for

?"done"
{} = wait_key()

--include builtins/VM/pRand.e
--printf(1,"#%x\n",-546615349)
--set_rand(-546615349)
--set_rand(#DF6B4FCB)
--set_rand(553239038)
--?get_rand()
--/*
-33207170
Ill give you two, said I, if the worst comes to the relative strength of the death of the water gave me my best chance of escape beyond estimating.
Then everything was quiet, in vivid contrast with the sun in their haste, and encumbered with the ants.
I had uttered prayers, fetish prayers, had prayed as heathens mutter charms when I had thought with a blow in the darkness.
These last few days rain and London.
The Martians fell at Woking.
553239038
With one another by means of a speck of blight, and apparently strengthened the walls of the spectators had gathered in one cart stood a blind man in the direction of Chobham.
I fell and lay about our feet.
And we were driving down Maybury Hill.
It was with the arms of an engine.
Now we see further.

But he came sliding down outside and very loud so that his son with a glittering integument, the controlling Martian whose delicate tentacles at last I answered.
Hundreds of outofwork clerks and shopmen working side by side with them gave rise in all those damn little clerks that used to be a tap, said my brother.
After working an hour later, a Martian.
I came upon another skeleton, with the gusts of the circumference.
Even within the shadow of a less simple sort will work in a preMartian periodical called Punch.
--*/
--/*
They were snapped off and finish em?
At that time there was little I didnt know that birds have shadows these days.
These canisters smashed on striking the groundthey did not fall over.
It was in extremity but now I must bear my witness.
I talked to her in my story.
--*/

--/*
""" weighted random pick of items in a Dict{String, Int} where keys are words, values counts """
function weightedrandompick(dict, total)
    n = rand(1:total)
    for (key, value) in dict
        n -= value
        if n <= 0
            return key
        end
    end
    return last(keys(dict))
end
 
let
    """ Read in the book "The War of the Worlds", by H. G. Wells. """
    wotw_uri =  "http://www.gutenberg.org/files/36/36-0.txt"
    wfile = "war_of_the_worlds.txt"
    stat(wfile).size == 0 && download(wotw_uri, wfile)  # download if file not here already
    text = read(wfile, String)
 
    """skip to start of book and prune end """
    startphrase, endphrase = "No one would have believed", "she has counted me, among the dead"
    text = text[findfirst(startphrase, text).start:findlast(endphrase, text).stop]
 
    """ Remove extraneous punctuation, but keep at least sentence-ending punctuation characters . ! and ? """
    text = replace(replace(text, r"[^01-9a-zA-Z\.\?\!â€™,]" => " "), r"([.?!])" => s" \1")
    words = split(text, r"\s+")
    for (i, w) in enumerate(words)
        w != "I" && i > 1 && words[i - 1] in [".", "?", "!"] && (words[i] = lowercase(words[i]))
    end
 
    """ Keep account of what words follow words and how many times it is seen. Treat sentence terminators
       (?.!) as words too. Keep account of what words follow two words and how many times it is seen.
    """
    follows = Dict{String, Dict{String, Int}}()
    follows2 = Dict{String, Dict{String, Int}}()
    afterstop  = Dict{String, Int}()
    wlen = length(words)
    for (i, w) in enumerate(@view words[1:end-1])
        d = get!(follows, w, Dict(words[i + 1] => 0))
        get!(d, words[i + 1], 0)
        d[words[i + 1]] += 1
        if w in [".", "?", "!"]
            d = get!(afterstop, words[i + 1], 0)
            afterstop[words[i + 1]] += 1
        end
        (i > wlen - 2) && continue
        w2 = w * " " * words[i + 1]
        d = get!(follows2, w2, Dict(words[i + 2] => 0))
        get!(d, words[i + 2], 0)
        d[words[i + 2]] += 1
    end
    followsums = Dict(key => sum(values(follows[key])) for key in keys(follows))
    follow2sums = Dict(key => sum(values(follows2[key])) for key in keys(follows2))
    afterstopsum = sum(values(afterstop))
 
   """ Assume that a sentence starts with a not to be shown full-stop character then use a weighted
       random choice of the possible words that may follow a full-stop to add to the sentence.
   """
    function makesentence()
        firstword = weightedrandompick(afterstop, afterstopsum)
        sentencewords = [firstword, weightedrandompick(follows[firstword], followsums[firstword])]
        while !(sentencewords[end] in [".", "?", "!"])
            w2 = sentencewords[end-1] * " " * sentencewords[end]
            if haskey(follows2, w2)
                push!(sentencewords, weightedrandompick(follows2[w2], follow2sums[w2]))
            else
                push!(sentencewords, weightedrandompick(afterstop, afterstopsum))
            end
        end
        sentencewords[1] = uppercase(firstword[1]) * (length(firstword) > 1 ? firstword[2:end] : "")
        println(join(sentencewords[1:end-1], " ") * sentencewords[end] * "\n")
    end
    # Print 3 weighted random pick sentences
    makesentence(); makesentence(); makesentence()
end
 
--*/
