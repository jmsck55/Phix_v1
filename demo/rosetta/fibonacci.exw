--
-- demo\rosetta\fibonacci.exw
-- ======================================
--
-- Author Pete Lomax, October 2015
--
--  The first five attempts were fine but not great.
--
with javascript_semantics

--/*
function fibonanal(integer n)           -- analytic
atom sqrt5 = sqrt(5),
     p = (1+sqrt5)/2,
     q = 1/p
    if n>=71 then ?9/0 end if   -- inaccuracies creep in above 70
    return round((power(p,n)+power(q,n))/sqrt5)
end function
 
function fibonar(integer n)             -- recursive (very slow)
    if n<2 then return n end if
    if n>38 then ?9/0 end if    -- far too slow
    if n>78 then ?9/0 end if    -- would probably be accurate to 78
    return fibonar(n-1)+fibonar(n-2)
end function

function fibonab(integer n, atom a=0, b=1)  -- tail recursive
--  if n>=44 then ?9/0 end if   -- overflow
    if n<1 then return a end if
    return fibonab(n-1, b, a+b)
end function
--*/

function fibonacci(integer n)       -- iterative, works for -ve numbers
atom a=0, b=1
    if n=0 then return 0 end if
    if abs(n)>=79 then ?9/0 end if  -- inaccuracies creep in above 78
    for i=1 to abs(n)-1 do
        {a,b} = {b,a+b}
    end for
    if n<0 and remainder(n,2)=0 then return -b end if
    return b
end function

--/*
function fibmatrix(integer n)   -- matrix multiplication
atom f1 = 1, f2 = 0,
     g1 = 0, g2 = 1
    if n>=79 then ?9/0 end if   -- inaccuracies creep in above 78
    while n>0 do
        if and_bits(n,1) then -- n odd
            {f1,f2} = {f1*g1+f2*g2,f1*g2+f2*(g1+g2)}
            n -= 1
        else
            {g1,g2} = {g1*g1+g2*g2,g1*g2+g2*(g1+g2)}
            n = floor(n/2)
        end if
    end while
    return f2
end function

sequence fcache = {1,1}

function fibonamem(integer n)   -- memoized, works for -ve numbers
integer absn = abs(n)
    if n=0 then return 0 end if
    if absn>=79 then ?9/0 end if    -- inaccuracies creep in above 78
--  if absn>length(fcache) then
--      fcache = append(fcache,fibonamem(absn-1)+fibonamem(absn-2))
--      if absn!=length(fcache) then ?9/0 end if
--  end if
--somewhat simpler:
    while length(fcache)<absn do
        fcache &= fcache[$] + fcache[$-1]
    end while
    if n<0 and remainder(n,2)=0 then return -fcache[absn] end if
    return fcache[absn]
end function
--*/

for i=0 to 28 do
    if i then puts(1,", ") end if
--  ba_printf(1,"%B", fibonamemba(i))
    if i<71 then -- inaccurate after that
--      printf(1,"%d", fibonanal(i))
    end if
    if i<35 then -- too slow after that
--      printf(1,"%d", fibonar(i))
    end if
--  if i<79 then -- inaccurate after that
--      printf(1,"%d\n", fibonab(i))
        printf(1,"%d", fibonacci(i))
--      printf(1,"%d", fibonacci(-i))
--      printf(1,"%d", fibonamem(i))
--      printf(1,"%d\n", fibonamem(-i))
--      printf(1,"%d", fibmatrix(i))
--  end if
end for
puts(1,"\n")

--printf(1,"%d\n", fibonamem(78))

--0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040

--!/*
puts(1,"\n\nbigatom:\n")
include builtins\bigatom.e

sequence fcacheba = {BA_ONE,BA_ONE}

function fibonamemba(integer n) -- memoized, works for -ve numbers, yields bigatom
integer absn = abs(n)
    if n=0 then return BA_ZERO end if
--  if absn>length(fcacheba) then
--      fcacheba = append(fcacheba,ba_add(fibonamemba(absn-1),fibonamemba(absn-2)))
--      if absn!=length(fcacheba) then ?9/0 end if
--  end if
    while length(fcacheba)<absn do
        fcacheba = append(fcacheba,ba_add(fcacheba[$],fcacheba[$-1]))
    end while
    if n<0 and remainder(n,2)=0 then return ba_sub(0,fcacheba[absn]) end if
    return fcacheba[absn]
end function


for i=0 to 28 do
    if i then puts(1,", ") end if
    ba_printf(1,"%B", fibonamemba(i))
    if i<71 then -- inaccurate after that
--      printf(1,"%d", fibonanal(i))
    end if
    if i<35 then -- too slow after that
--      printf(1,"%d", fibonar(i))
    end if
    if i<79 then -- inaccurate after that
--      printf(1,"%d", fibonab(i))
--      printf(1,"%d", fibonacci(i))
--      printf(1,"%d", fibonacci(-i))
--      printf(1,"%d", fibonamem(i))
--      printf(1,"%d", fibonamem(-i))
--      printf(1,"%d", fibmatrix(i))
    end if
end for
puts(1,"\n")
bigatom fib705 = fibonamemba(705)
string fib705t = ba_sprintf("%B",fib705)
printf(1,"%s\n(%d digits)\n",{fib705t,length(fib705t)})

--0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811
--0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811 012345678901234
--1081213530912648191985419587942084110095342850438593857649766278346130479286685742885693301250359913460718567974798268702550329302771992851392180275594318434818082
--(163 digits)-15=148
--!*/

puts(1,"\n\nmpfr:\n")
include mpfr.e
 
mpz res = NULL, prev, next
integer lastn
atom t0 = time()

function fibonampz(integer n) -- resumable, works for -ve numbers, yields mpz
    integer absn = abs(n)
    if res=NULL or absn!=abs(lastn)+1 then
        if res=NULL then
            prev = mpz_init(0)
            res = mpz_init(1)
            next = mpz_init()
        else
            if n==lastn then return res end if
        end if
        mpz_fib2_ui(res,prev,absn)
    else
        if lastn<0 and remainder(lastn,2)=0 then
            mpz_mul_si(res,res,-1)
        end if
        mpz_add(next,res,prev)
        {prev,res,next} = {res,next,prev}
    end if
    if n<0 and remainder(n,2)=0 then
        mpz_mul_si(res,res,-1)
    end if
    lastn = n
    return res
end function
 
for i=0 to 28 do
    if i then puts(1,", ") end if
    printf(1,"%s", {mpz_get_str(fibonampz(i))})
end for
puts(1,"\n")
printf(1,"%s\n", {mpz_get_str(fibonampz(705))})

mpz n
-- test that the loop and single call take about the same time: (passed with flying colours!)
--for i=4784969-1000 to 4784969 do
--  n = fibonampz(i)
--end for
--?"redo??"
--?elapsed(time()-t0)
n = fibonampz(4784969)
--?elapsed(time()-t0)
--mpz_fib_ui(n,4784969)                         -- 0.1s (see note)
string s = mpz_get_str(n)                       -- (2s)
?shorten(s)
?elapsed(time()-t0)

-- Note that mpz_fib_ui() is intended for isolated values only; while an isolated mpz_fib_ui(4784969) 
-- takes just 0.1s, invoking mpz_fib_ui(1..4784969) would take about 3 and a half days(!!) whereas the 
-- resumable version above gets the same job done in about 2mins 40s, averaging about 30,000/s, none 
-- too shabby for million-digit numbers!
-- I would certainly not recommend memoising all 4.7 million numbers, the resumable version given 
-- seems to be a much better approach.

{} = wait_key()

--/*
--couple of original versions, now in mpfr.js (in transpiled form):
procedure Mpz_fib2_ui(mpz fn, fnsub1, integer n)
    n -= 1
    --
    -- (manually) translated from the fastFibonacciDoubling() method off of
    -- https://www.nayuki.io/res/fast-fibonacci-algorithms/FastFibonacci.java
    -- original desktop version used for testing and that this was transpiled
    -- from can be found in demo\rosetta\fibonacci.exw, as Mpz_fib2_ui()
    --
    if n<0 then
        mpz_set_si(fnsub1,1)
        mpz_set_si(fn,0)
    else
        mpz_set_si(fnsub1,0)
        mpz_set_si(fn,1)
        integer bit = 0, m = n
        while m do
            m = floor(m/2)
            bit = iff(bit=0?1:2*bit)
        end while
        mpz d = mpz_init()
        while bit do    
            // Loop invariant: fnsub1 = F(m), fn = F(m+1)
            --  assert fnsub1.equals(slowFibonacci(m));
            --  assert fn.equals(slowFibonacci(m+1));
                        
            // Double it
            -- d := fnsub1 * (fn*2 - fnsub1)
            mpz_mul_si(d,fn,2)
            mpz_sub(d,d,fnsub1)
            mpz_mul(d,fnsub1,d)
            -- e := fnsub1*fnsub1 + fn*fn
            mpz_mul(fnsub1,fnsub1,fnsub1)
            mpz_mul(fn,fn,fn)
            mpz_add(fn,fn,fnsub1)
            -- fnsub1 = d;
            -- fn = e;
            mpz_set(fnsub1,d)
            m *= 2;
            --  assert fnsub1.equals(slowFibonacci(m));
            --  assert fn.equals(slowFibonacci(m+1));
                        
            // Advance by one conditionally
            if and_bits(n,bit) then
                --  {fnsub1,fn} = {fn,fnsub1+fn}
                --  d := fnsub1 + fn
                mpz_add(d,fnsub1,fn)
                mpz_set(fnsub1,fn)
                mpz_set(fn,d)
                m += 1
                --  assert fnsub1.equals(slowFibonacci(m));
                --  assert fn.equals(slowFibonacci(m+1));
            end if
            bit = floor(bit/2)
        end while
    end if
end procedure

procedure Mpz_fib_ui(mpz fn, integer n)
    --
    -- algorithm 3 from https://arxiv.org/pdf/2008.08822.pdf
    -- see also https://gmplib.org/manual/Fibonacci-Numbers-Algorithm
    -- original desktop version used for testing and that this was transpiled
    -- from can be found in demo\rosetta\fibonacci.exw, as Mpz_fib_ui()
    --
    if n<2 then
        if n<0 then ?9/0 end if
        mpz_set_si(fn,n)
    else
        mpz c = mpz_init(3)
        mpz {a,b} = mpz_inits(2)
        if remainder(n,2)=0 then
            mpz_set_si(a,0)
            mpz_set_si(b,1)
        else
            mpz_set_si(a,1)
            mpz_set_si(b,-1)
        end if
        n = floor(n/2)
        while n>1 do
            if remainder(n,2)=0 then
                mpz_mul(b,b,c)
                mpz_add(b,a,b)
            else    
                mpz_mul(a,a,c)
                mpz_add(a,b,a)
            end if
            mpz_mul(c,c,c)
            mpz_sub_si(c,c,2)
            n = floor(n/2)
        end while
        mpz_mul(a,a,c)
        mpz_add(fn,b,a)
    end if
end procedure
--*/
