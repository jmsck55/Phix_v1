--
-- demo\rosetta\Arithmetic_evaluationD.exw
-- =======================================
--
-- Translation of https://rosettacode.org/wiki/Arithmetic_evaluation#D (reproduced below)
--
--  {{trans|D}} just for fun (in order to decipher all that abstract class 
--  Visitor/accept/visit pointless indirection stuff, when in fact a plain 
--  and simple recursion is all that it needs, plus 221 lines -> 166 lines, 
--  should you wrongly care about that, I know I shouldn't...)
--
with javascript_semantics
enum               Num, OBkt, CBkt, Add, Sub, Mul, Div
constant opChar = {"#", "(",  ")",  "+", "-", "*", "/"},
         opPrec = {0,  -9,   -9,      1,   1,   2,   2}
enum TYPE,STR,POS,LHS,RHS -- (for nodes in opr and num)
sequence opr, num

function pop_opr()
    sequence res = opr[$];  opr = opr[1..-2]
    return res
end function

procedure joinXP(sequence x)
    x[RHS] = num[$];  num = num[1..-2]
    x[LHS] = num[$]
    num[$] = x
end procedure

function isDigit(integer ch)
    return ch>='0' and ch<='9'
end function

string xpr, token, resultStr
integer xpHead, xpTail, result, level
sequence Tree

function nextToken()
    while xpHead<=length(xpr) and xpr[xpHead]==' ' do
        xpHead += 1 -- Skip spaces
    end while
    xpTail = xpHead
    if xpHead<=length(xpr) then
        integer ch = xpr[xpHead]
        if find(ch,"()+-*/") then -- valid non-number
            xpTail += 1
        elsif isDigit(ch) then
            while xpTail<=length(xpr) and isDigit(xpr[xpTail]) do
                xpTail += 1
            end while
        end if
        if xpTail>xpHead then return xpr[xpHead..xpTail-1] end if
    end if
    if xpTail<=length(xpr) then
        throw("Invalid Char <%c>",{xpr[xpTail]})
    end if
    return ""
end function

function parse(string s)
    bool expectingOP = false
    xpr = s
    xpHead = 1
    num = {}
    opr = {{CBkt,")",-1,NULL,NULL}} -- prevent evaluate null OP precedence.
    while true do
        token = nextToken()
        if token="" then exit end if
        integer Type = max(find(token,opChar),Num)
        sequence tokenXP = {Type,token,xpHead,NULL,NULL}
        if expectingOP then     -- Process OP-alike tokenXP.
            switch token
                case ")":
                    while opr[$][TYPE]!=OBkt do
                        joinXP(pop_opr())
                    end while
                    {} = pop_opr()
                    expectingOP = true
                case "+", "-", "*", "/":
                    while opPrec[tokenXP[TYPE]]<=opPrec[opr[$][TYPE]] do
                        joinXP(pop_opr())
                    end while
                    opr = append(opr,tokenXP)
                    expectingOP = false
                default:
                    throw("Expecting Operator or ), not <%s>",{token})
            end switch
        else                    -- Process Num-alike tokenXP
            switch token
                case "+", "-", "*", "/", ")":
                    throw("Expecting Number or (, not <%s>",{token})
                case "(":
                    opr = append(opr,tokenXP)
                    expectingOP = false
                default: -- Number
                    num = append(num,tokenXP)
                    expectingOP = true
            end switch
        end if
        xpHead = xpTail
    end while
    while length(opr)>1 do // Join pending Op.
        joinXP(pop_opr())
    end while
    if length(num)!=1 then // Should be just the one (nested) node left.
        throw("Parse Error...")
    end if
    return num[1]
end function

procedure visit(sequence node)
    if level+1>length(Tree) then
        Tree = append(Tree,"")
    end if
    string str = node[STR]
    integer Type = node[TYPE],
            p = node[POS],
            e = p+length(str)-1
    while length(Tree[level])<e do
        Tree[level] &= ' '
    end while
    Tree[level][p..e] = str
    level += 1
    if Type=Num then
        resultStr &= str
        result = to_integer(str)
    else
        resultStr &= "("
        visit(node[LHS])
        integer lhs = result
        resultStr &= str -- (same as &= opChar[Type])
        visit(node[RHS])
        resultStr &= ")"
        switch Type
            case Add: result = lhs+result
            case Sub: result = lhs-result
            case Mul: result = lhs*result
            case Div: result = lhs/result
            default: throw("Invalid type")
        end switch
    end if
    level -= 1
end procedure

procedure CalcVis(sequence ast, string expr)
    result = 0
    level = 1
    resultStr = ""
    Tree = {}
    visit(ast)
    -- More fancy:
    for i=2 to length(Tree) do
        bool flipflop = false
        for j=1 to length(Tree[i]) do
            while j>=length(Tree[i-1]) do
                Tree[i-1] &= " "
            end while
            integer c1 = Tree[i][j],
                    c2 = Tree[i-1][j]
            if flipflop and c1==' ' and c2==' ' then
                Tree[i-1][j] = '.'
            end if
            if c1!='.' and c1!=' '
            and (j==1 or not isDigit(Tree[i][j-1])) then
                flipflop = not flipflop
            end if
        end for
    end for
--pp(Tree,{pp_Nest,9999})
    printf(1,"%s\n%s ==>\n%s = %d\n", {join(Tree,"\n"), expr, resultStr, result})
end procedure

constant expr = "1 + 2*(3 - 2*(3 - 2)*((2 - 4)*5 - 22/(7 + 2*(3 - 1)) - 1)) + 1"
try
    sequence ast = parse(expr)
--  pp(ast)
    CalcVis(ast,expr)
catch e
    ?e
end try
?"done"
{} = wait_key()
--abort(0)
--/*
output:
   ........................................................+.
 .+..                                                        1
1    *...
    2   .-..........
       3     .......*................................
            *...                 ....................-.
           2   .-.            ..-...                   1
              3   2       ...*      /...
                        .-.   5   22   .+..
                       2   4          7    *...
                                          2   .-.
                                             3   1

1 + 2*(3 - 2*(3 - 2)*((2 - 4)*5 - 22/(7 + 2*(3 - 1)) - 1)) + 1 ==>
((1+(2*(3-((2*(3-2))*((((2-4)*5)-(22/(7+(2*(3-1)))))-1)))))+1) = 60
--*/

--/* For reference, a copy of https://rosettacode.org/wiki/Arithmetic_evaluation#D (as promised, same output)

import std.stdio, std.string, std.ascii, std.conv, std.array,
       std.exception, std.traits;
 
struct Stack(T) {
    T[] data;
    alias data this;
    void push(T top) pure nothrow @safe { data ~= top; }
 
    T pop(bool discard = true)() pure @nogc @safe {
      immutable static exc = new immutable(Exception)("Stack Empty");
      if (data.empty)
        throw exc;
      auto top = data[$ - 1];
      static if (discard)
        data.popBack;
      return top;
    }
}
 
enum Type {         Num, OBkt, CBkt, Add, Sub, Mul, Div }
immutable opChar = ["#", "(",  ")",  "+", "-", "*", "/"];
immutable opPrec = [ 0,  -9,   -9,    1,   1,   2,   2];
 
abstract class Visitor { void visit(XP e) pure @safe; }
 
final class XP {
  immutable Type type;
  immutable string str;
  immutable int pos; // Optional, to display AST struct.
  XP LHS, RHS;
 
  this(string s=")", int p = -1) pure nothrow @safe {
    str = s;
    pos = p;
    auto localType = Type.Num;
    foreach_reverse (immutable t; [EnumMembers!Type[1 .. $]])
      if (opChar[t] == s)
        localType = t;
    this.type = localType;
  }
 
  override int opCmp(Object other) pure @safe {
    auto rhs = cast(XP)other;
    enforce(rhs !is null);
    return opPrec[type] - opPrec[rhs.type];
  }
 
  void accept(Visitor v) pure @safe { v.visit(this); }
}
 
final class AST {
  XP root;
  Stack!XP opr, num;
  string xpr, token;
  int xpHead, xpTail;
 
  void joinXP(XP x) pure @safe {
    x.RHS = num.pop;
    x.LHS = num.pop;
    num.push(x);
  }
 
  string nextToken() pure @safe {
    while (xpHead < xpr.length && xpr[xpHead] == ' ')
      xpHead++; // Skip spc.
    xpTail = xpHead;
    if (xpHead < xpr.length) {
      token = xpr[xpTail .. xpTail + 1];
      switch (token) {
        case "(", ")", "+", "-", "*", "/": // Valid non-number.
          xpTail++;
          return token;
        default: // Should be number.
          if (token[0].isDigit) {
            while (xpTail < xpr.length && xpr[xpTail].isDigit())
              xpTail++;
            return xpr[xpHead .. xpTail];
          } // Else may be error.
      } // End switch.
    }
    if (xpTail < xpr.length)
      throw new Exception("Invalid Char <" ~ xpr[xpTail] ~ ">");
    return null;
  } // End nextToken.
 
  AST parse(in string s) /*@safe*/ {
    bool expectingOP;
    xpr = s;
    try {
      xpHead = xpTail = 0;
      num = opr = null;
      root = null;
      opr.push(new XP); // CBkt, prevent evaluate null OP precedence.
      while ((token = nextToken) !is null) {
        XP tokenXP = new XP(token, xpHead);
        if (expectingOP) { // Process OP-alike XP.
          switch (token) {
            case ")":
              while (opr.pop!false.type != Type.OBkt)
                joinXP(opr.pop);
              opr.pop;
              expectingOP = true;
              break;
            case "+", "-", "*", "/":
              while (tokenXP <= opr.pop!false)
                joinXP(opr.pop());
              opr.push(tokenXP);
              expectingOP = false;
              break;
            default:
              throw new Exception("Expecting Operator or ), not <"
                                  ~ token ~ ">");
          }
        } else { // Process Num-alike XP.
          switch (token) {
            case "+", "-", "*", "/", ")":
              throw new Exception("Expecting Number or (, not <"
                                  ~ token ~ ">");
            case "(":
              opr.push(tokenXP);
              expectingOP = false;
              break;
            default: // Number.
              num.push(tokenXP);
              expectingOP = true;
          }
        }
        xpHead = xpTail;
      } // End while.
 
      while (opr.length > 1) // Join pending Op.
        joinXP(opr.pop);
    } catch(Exception e) {
      writefln("%s\n%s\n%s^", e.msg, xpr, " ".replicate(xpHead));
      root = null;
      return this;
    }
 
    if (num.length != 1) { // Should be one XP left.
      "Parse Error...".writefln;
      root = null;
    } else {
      root = num.pop;
    }
    return this;
  } // End Parse.
}  // End class AST.
 
// To display AST fancy struct.
void ins(ref char[][] s, in string v, in int p, in int l)
pure nothrow @safe {
  if (l + 1 > s.length)
    s.length++;
  while (s[l].length < p + v.length + 1)
    s[l] ~= " ";
  s[l][p .. p + v.length] = v[];
}
 
final class CalcVis : Visitor {
  int result, level;
  string resultStr;
  char[][] Tree;
 
  static void opCall(AST a) @safe {
    if (a && a.root) {
      auto c = new CalcVis;
      a.root.accept(c);
      foreach (immutable i; 1 .. c.Tree.length) { // More fancy.
        bool flipflop = false;
        enum char mk = '.';
        foreach (immutable j; 0 .. c.Tree[i].length) {
          while (j >= c.Tree[i - 1].length)
            c.Tree[i - 1] ~= " ";
          immutable c1 = c.Tree[i][j];
          immutable c2 = c.Tree[i - 1][j];
          if (flipflop && (c1 == ' ') && c2 == ' ')
            c.Tree[i - 1][j] = mk;
          if (c1 != mk && c1 != ' ' &&
              (j == 0 || !isDigit(c.Tree[i][j - 1])))
            flipflop = !flipflop;
        }
      }
      foreach (const t; c.Tree)
        t.writefln;
      writefln("\n%s ==>\n%s = %s", a.xpr, c.resultStr, c.result);
    } else
      "Evalute invalid or null Expression.".writefln;
  }
 
  // Calc. the value, display AST struct and eval order.
  override void visit(XP xp) @safe {
    ins(Tree, xp.str, xp.pos, level);
    level++;
    if (xp.type == Type.Num) {
      resultStr ~= xp.str;
      result = xp.str.to!int;
    } else {
      resultStr ~= "(";
      xp.LHS.accept(this);
      immutable int lhs = result;
      resultStr ~= opChar[xp.type];
      xp.RHS.accept(this);
      resultStr ~= ")";
      switch (xp.type) {
        case Type.Add: result = lhs + result; break;
        case Type.Sub: result = lhs - result; break;
        case Type.Mul: result = lhs * result; break;
        case Type.Div: result = lhs / result; break;
        default: throw new Exception("Invalid type");
      }
    }
    level--;
  }
}
 
void main(string[] args) /*@safe*/ {
  immutable exp0 = "1 + 2*(3 - 2*(3 - 2)*((2 - 4)*5" ~
                   " - 22/(7 + 2*(3 - 1)) - 1)) + 1";
  immutable exp = (args.length > 1) ? args[1 .. $].join(' ') : exp0;
  new AST().parse(exp).CalcVis; // Should be 60.
}
--*/
