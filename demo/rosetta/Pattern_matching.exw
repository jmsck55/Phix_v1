--
-- demo\rosetta\Pattern_matching.exw
-- =================================
--
-- 1). Lightly modified copy of demo\rosetta\VisualiseTree.exw

with javascript_semantics

constant Horizontal = #C4,
         Horizontals = "\#C4",
         TopLeft = #DA,
         Vertical = #B3,
         BtmLeft = #C0

procedure visualise_tree(object tree, string root=Horizontals)
    if atom(tree) then
        puts(1,"<empty>\n")
    else
        object {c,l,v,r} = tree
        integer g = root[$]
        if sequence(l) then
            root[$] = iff(g=TopLeft or g=Horizontal?' ':Vertical)
            visualise_tree(l,root&TopLeft)
        end if
        root[$] = g
        puts(1,root&c)
        ?v
        if sequence(r) then
            root[$] = iff(g=TopLeft?Vertical:' ')
            visualise_tree(r,root&BtmLeft)
        end if
    end if
end procedure

-- 2). Imagine the following is in a file, say algebraic_data_types.e - not quite generic enough
--      for inclusion in builtins, but not exactly difficult to copy/maintain per-project either.

function match_one(sequence key, object t)
    sequence res = {}
    if sequence(t)
    and length(key)==length(t) then
        for i=1 to length(key) do
            object ki = key[i], ti = t[i]
            if sequence(ki) and not string(ki) then
                sequence r2 = match_one(ki,ti)
                if r2={} then res = {} exit end if
                res &= r2
            else
                if ki=0 then
                    res = append(res,ti)
                else
                    if ki!=ti then res = {} exit end if
                end if
            end if
        end for
    end if
    return res
end function

/*global*/ function match_algebraic(sequence set, t)
    sequence s
    for i=1 to length(set) do
        s = match_one(set[i],t)
        if length(s) then exit end if
    end for
    return s
end function

-- 3). The actual task

constant B = "B", R = "R"

function balance(sequence t)
    sequence s = match_algebraic({{B,{R,{R,0,0,0},0,0},0,0},
                                  {B,{R,0,0,{R,0,0,0}},0,0},
                                  {B,0,0,{R,{R,0,0,0},0,0}},
                                  {B,0,0,{R,0,0,{R,0,0,0}}}},t)
    if length(s) then
        object {a,x,b,y,c,z,d} = s
        t = {R,{B,a,x,b},y,{B,c,z,d}}
    end if
    return t
end function

function ins(object tree, object leaf)
    if tree=NULL then
        tree = {R,NULL,leaf,NULL}
    else
        object {c,l,k,r} = tree
        if leaf!=k then
            if leaf<k then l = ins(l,leaf)
                      else r = ins(r,leaf)
            end if
            tree = balance({c,l,k,r})
        end if
    end if
    return tree
end function

function tree_insert(object tree, object leaf)
    tree = ins(tree,leaf)
    tree[1] = B
    return tree
end function

sequence stuff = shuffle(tagset(10))
object tree = NULL
for i=1 to length(stuff) do
    tree = tree_insert(tree,stuff[i])
end for
visualise_tree(tree)

?"done"
{} = wait_key()

