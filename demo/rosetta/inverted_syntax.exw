--
-- demo\rosetta\inverted_syntax.exw
-- ================================
--
--  This can be used to compile/run itself, as long as you've still got the original...
--
constant pun = split(join_by("()[]=,-",7,1,"","*"),"*",true)
constant nup = split(join_by(")(][=,-",7,1,"","*"),"*",true)
constant rip = split(join_by("       <>{}@!-       ",7,3,"","*"),"*",true)

function mung(string pgm)
    sequence lines=reverse(split(substitute_all(pgm,pun,rip),"\r\n"))
    for i=1 to length(lines) do lines[i] = substitute_all(join(reverse(split(lines[i]))),rip,nup) end for
    return join(lines,"\n")
end function
sequence cl = command_line()
string pgm = get_text(cl[$])
include write_file.e
{} = write_file("test.exw",mung(pgm)&"\n")
if length(cl)>2 then
    system(cl[1]&"test.exw")
end if
puts(1,mung(pgm)&"\n")
--?mung(pgm)
{} = wait_key()

--/* without parameters (or this comment), creates test.exw as follows:

()wait_key = {}
(pgm)?mung--
(&"\n"(pgm)mung,1)puts
if end
(&"test.exw"[1]cl)system    
then >2(cl)length if
(&"\n"(pgm)mung,"test.exw")write_file = {}
write_file.e include
([$]cl)get_text = pgm string
()command_line = cl sequence
function end
("\n",lines)join return    
for end (nup,rip,((([i]lines)split)reverse)join)substitute_all = [i]lines do (lines)length to 1=i for    
(("\r\n",(rip,pun,pgm)substitute_all)split)reverse=lines sequence    
(pgm string)mung function

(true,"*",("*","",3,7,"       -<>{}@!       ")join_by)split = rip constant
(true,"*",("*","",1,7,"-,=][)(")join_by)split = nup constant
(true,"*",("*","",1,7,"-,=[]()")join_by)split = pun constant
--
original... the got still you've as long as ,itself compile/run to used be can This  --
--
================================ --
demo\rosetta\inverted_syntax.exw --
--
--*/
