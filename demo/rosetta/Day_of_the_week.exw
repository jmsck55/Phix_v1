--
-- demo\rosetta\Day_of_the_week.exw
-- ================================
--
-- Author Pete Lomax, August 2015

include builtins\pdate.e

sequence res = {}
for y=2008 to 2121 do
--12/01/2020: (now uploaded to rc)
--  if day_of_week(y,12,25)=1 then  -- (1=sunday)
--  if day_of_week(y,12,25)=7 then  -- (7=sunday)
    if day_of_week(y,12,25,true)="Sunday" then
        res = append(res,y)
    end if
end for

?res

-- alternative method, using windows API (not worth posting to rc):
include builtins\cffi.e

constant tST="""
typedef struct _SYSTEMTIME {
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME;
""",
tFT = """
typedef struct _FILETIME {
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
} FILETIME, *PFILETIME;
""",
tSTtoFT="""
BOOL WINAPI SystemTimeToFileTime(
  _In_   const SYSTEMTIME *lpSystemTime,
  _Out_  LPFILETIME lpFileTime
);
""",
tFTtoST="""
BOOL WINAPI FileTimeToSystemTime(
  _In_   const FILETIME *lpFileTime,
  _Out_  LPSYSTEMTIME lpSystemTime
);
"""
if platform()=WINDOWS then
    atom idST = define_struct(tST),
         pST = allocate_struct(idST),
         idFT = define_struct(tFT),
         pFT = allocate_struct(idFT),
         k32 = open_dll("kernel32.dll"),
         xSTtoFT = define_cffi_func(k32,tSTtoFT),
         xFTtoST = define_cffi_func(k32,tFTtoST)

    res = {}

    set_struct_field(idST,pST,"wMonth",12)
    set_struct_field(idST,pST,"wDay",25)
    for y=2008 to 2121 do
        set_struct_field(idST,pST,"wYear",y)
        {} = c_func(xSTtoFT,{pST,pFT})
        {} = c_func(xFTtoST,{pFT,pST})
        if get_struct_field(idST,pST,"wDayOfWeek")=0 then
            -- (0==sunday)
            res = append(res,y)
        end if
    end for
    ?res
end if

{} = wait_key()

--output (both cases)
--{2011,2016,2022,2033,2039,2044,2050,2061,2067,2072,2078,2089,2095,2101,2107,2112,2118}

