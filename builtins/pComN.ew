--
-- pComN.ew
-- =======
--
--  A mini (bare bones) COM implementation. 
--  Written for Edita, to invoke the Vista+ style GetOpenFile/SaveOpenFile, rather
--   than the old style that you get as soon as you define a hook procedure (grrr).
--
--  I cannot really say anything about VB or OCX support, except that if you want
--  to know how to handle a VARIANT, or IDispatch, the answer is "not here" - for 
--  anything like that you might be better off trying eucom. IE This is C++-style
--  COM, and most definitely not VBScript-style COM.
--
--  What little documentation there is lies scattered throughout this code.
--  If you have winAPI.chm (and PwinAPI.txt) properly installed, then F1 Help, in
--  Edita, on almost anything (COM-related) in this file should find it.
-- [Update: Should now all be linked to mini.chm]
--
-- Some Random links (this may not be the best place for them):
--  http://www.codeproject.com/Articles/13601/COM-in-plain-C

constant DEBUG=0    -- When 1, outputs "COM error %08x [%s] (%08x:%02x %s)\n" for
                    --  anything amiss. The () part may give a hint but do not
                    --  expect much, eg 0C in the %02x may mean IFileDialog_Show
                    --  or IShellItem_BindToHandler or something else entirely.
                    -- You are more likely to get somewhere with trace(1) or a 
                    --  judiciously placed ?9/0, to be honest about it.
                    -- Pass an extra 0 to cominvk[_imm]() to suppress debug for
                    --  specific calls that you /expect/ to (sometimes) fail,
                    --  and/or an extra 1 (temporarily) as you write new code,
                    --  both of which will override this default setting for
                    --  those particular calls.
                    

--include arwen.ew
-- required for (at least):
--  xMultiByteToWideChar, xWideCharToMultiByte, xCoInitialize, xCoCreateInstance, 
--  xSHCreateItemFromParsingName, xCoTaskMemFree, CP_UTF8
-- 
--!/*
--DEV move to cinit():
constant 
    kernel32 = open_dll("kernel32.dll"),

    xMultiByteToWideChar = define_c_func(kernel32,"MultiByteToWideChar",
        {C_INT,     --  UINT  CodePage,     // code page 
         C_INT,     --  DWORD  dwFlags,     // character-type options 
         C_PTR,     --  LPCSTR  lpMultiByteStr,     // address of string to map 
         C_INT,     --  int  cchMultiByte,  // number of characters in string 
         C_PTR,     --  LPWSTR  lpWideCharStr,      // address of wide-character buffer 
         C_INT},    --  int  cchWideChar    // size of buffer 
        C_INT),     -- int

    xWideCharToMultiByte = define_c_func(kernel32,"WideCharToMultiByte",
        {C_INT,     --  UINT  CodePage,     // code page 
         C_INT,     --  DWORD  dwFlags,     // performance and mapping flags 
         C_PTR,     --  LPCWSTR  lpWideCharStr,     // address of wide-character string 
         C_INT,     --  int  cchWideChar,   // number of characters in string 
         C_PTR,     --  LPSTR  lpMultiByteStr,      // address of buffer for new string 
         C_INT,     --  int  cchMultiByte,  // size of buffer 
         C_PTR,     --  LPCSTR  lpDefaultChar,      // address of default for unmappable characters  
         C_PTR},    --  LPBOOL  lpUsedDefaultChar   // address of flag set when default char. used 
        C_INT),     -- int

    CP_UTF8 = 65001,
    $
--!*/


global constant CLSCTX_INPROC_SERVER        = 0x000001,
--              CLSCTX_INPROC_HANDLER       = 0x000002,
--              CLSCTX_LOCAL_SERVER         = 0x000004,
--              CLSCTX_INPROC_SERVER16      = 0x000008,
--              CLSCTX_REMOTE_SERVER        = 0x000010,
                CLSCTX_ALL                  = 0x00001F,
--              CLSCTX_INPROC_HANDLER16     = 0x000020,
--              CLSCTX_INPROC_SERVERX86     = 0x000040,
--              CLSCTX_INPROC_HANDLERX86    = 0x000080,
--              CLSCTX_ESERVER_HANDLER      = 0x000100,
--              CLSCTX_NO_CODE_DOWNLOAD     = 0x000400,
--              CLSCTX_NO_CUSTOM_MARSHAL    = 0x001000,
--              CLSCTX_ENABLE_CODE_DOWNLOAD = 0x002000,
--              CLSCTX_NO_FAILURE_LOG       = 0x004000,
--              CLSCTX_DISABLE_AAA          = 0x008000,
--              CLSCTX_ENABLE_AAA           = 0x010000,
--              CLSCTX_FROM_DEFAULT_CONTEXT = 0x020000,
$

global constant S_OK            = 0,
                E_NOTIMPL       = 0x80004001,
                E_NOINTERFACE   = 0x80004002,
                E_FAIL          = 0x80004005,
                E_INVALIDARG    = 0x80070057,
                ERROR_CANCELLED = 0x800704c7

global constant --FOS_OVERWRITEPROMPT   = 0x00000002,
--              FOS_STRICTFILETYPES     = 0x00000004,
--              FOS_NOCHANGEDIR         = 0x00000008,
--              FOS_PICKFOLDERS         = 0x00000020,
                FOS_FORCEFILESYSTEM     = 0x00000040,
--              FOS_ALLNONSTORAGEITEMS  = 0x00000080,
--              FOS_NOVALIDATE          = 0x00000100,
                FOS_ALLOWMULTISELECT    = 0x00000200,
--              FOS_PATHMUSTEXIST       = 0x00000800,
--              FOS_FILEMUSTEXIST       = 0x00001000,
--              FOS_CREATEPROMPT        = 0x00002000,
--              FOS_SHAREAWARE          = 0x00004000,
--              FOS_NOREADONLYRETURN    = 0x00008000,
--              FOS_NOTESTFILECREATE    = 0x00010000,
--              FOS_HIDEMRUPLACES       = 0x00020000,
--              FOS_HIDEPINNEDPLACES    = 0x00040000,
--              FOS_NODEREFERENCELINKS  = 0x00100000,
--              FOS_DONTADDTORECENT     = 0x02000000,
--              FOS_FORCESHOWHIDDEN     = 0x10000000,
--              FOS_DEFAULTNOMINIMODE   = 0x20000000,
--              FOS_FORCEPREVIEWPANEON  = 0x40000000
$

global constant --SIGDN_NORMALDISPLAY               = 0,
--              SIGDN_PARENTRELATIVEPARSING         = 0x80018001,
--              SIGDN_DESKTOPABSOLUTEPARSING        = 0x80028000,
--              SIGDN_PARENTRELATIVEEDITING         = 0x80031001,
--              SIGDN_DESKTOPABSOLUTEEDITING        = 0x8004c000,
                SIGDN_FILESYSPATH                   = 0x80058000,
--              SIGDN_URL                           = 0x80068000,
--              SIGDN_PARENTRELATIVEFORADDRESSBAR   = 0x8007c001,
--              SIGDN_PARENTRELATIVE                = 0x80080001,
$

-- See C:\Program Files (x86)\Windows Kits\8.1\Include\um\sapi.h
global constant SPF_DEFAULT             = #000,
                SPF_ASYNC               = #001,
--              SPF_PURGEBEFORESPEAK    = #002,
--              SPF_IS_FILENAME         = #004,
                SPF_IS_XML              = #008,
--              SPF_IS_NOT_XML          = #010,
--              SPF_PERSIST_XML         = #020,
--              SPF_NLP_SPEAK_PUNC      = #040,
--              SPF_PARSE_SAPI          = #080,
--              SPF_PARSE_SSML          = #100,
--              SPF_PARSE_AUTODETECT    = 0,
--              SPF_NLP_MASK    = SPF_NLP_SPEAK_PUNC,
--              SPF_PARSE_MASK  = ( SPF_PARSE_SAPI | SPF_PARSE_SSML ) ,
--              SPF_PARSE_MASK          = #180,
--              SPF_VOICE_MASK  = ( SPF_ASYNC | SPF_PURGEBEFORESPEAK | SPF_IS_FILENAME | SPF_IS_XML | SPF_IS_NOT_XML | SPF_NLP_MASK | SPF_PERSIST_XML | SPF_PARSE_MASK ) ,
--              SPF_VOICE_MASK          = #1FF,
--              SPF_UNUSED_FLAGS        = not_bits(SPF_VOICE_MASK)
--
--              SPEI_UNDEFINED = 0,
--              SPEI_START_INPUT_STREAM = 1,
                SPEI_END_INPUT_STREAM = 2,
--              SPEI_VOICE_CHANGE = 3,
--              SPEI_TTS_BOOKMARK = 4,
                SPEI_WORD_BOUNDARY = 5,
--              SPEI_PHONEME = 6,
--              SPEI_SENTENCE_BOUNDARY = 7,
--              SPEI_VISEME = 8,
--              SPEI_TTS_AUDIO_LEVEL = 9,
--              SPEI_TTS_PRIVATE = 15,
--              SPEI_END_SR_STREAM = 34,
--              SPEI_SOUND_START = 35,
--              SPEI_SOUND_END = 36,
--              SPEI_PHRASE_START = 37,
--              SPEI_RECOGNITION = 38,
--              SPEI_HYPOTHESIS = 39,
--              SPEI_SR_BOOKMARK = 40,
--              SPEI_PROPERTY_NUM_CHANGE = 41,
--              SPEI_PROPERTY_STRING_CHANGE = 42,
--              SPEI_FALSE_RECOGNITION = 43,
--              SPEI_INTERFERENCE = 44,
--              SPEI_REQUEST_UI = 45,
--              SPEI_RECO_STATE_CHANGE = 46,
--              SPEI_ADAPTATION = 47,
--              SPEI_START_SR_STREAM = 48,
--              SPEI_RECO_OTHER_CONTEXT = 49,
--              SPEI_SR_AUDIO_LEVEL = 50,
--              SPEI_SR_RETAINEDAUDIO = 51,
--              SPEI_SR_PRIVATE = 52,
--              SPEI_ACTIVE_CATEGORY_CHANGED = 53,
--              SPEI_RESERVED5 = 54,
--              SPEI_RESERVED6 = 55,
--              SPEI_RESERVED1 = 30,
--              SPEI_RESERVED2 = 33,
--              SPEI_RESERVED3 = 63,
                $
--See also: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens

function gnibble(integer c)
-- helper routine for GUID()
    if c>='0' and c<='9' then return c-'0' end if
    if c>='A' and c<='F' then return c-'A'+10 end if
    if c>='a' and c<='f' then return c-'a'+10 end if
    ?9/0
end function

--DEV init flag?
constant guid_map = {7,8,5,6,3,4,1,2,12,13,10,11,17,18,15,16,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36}

global function GUID(string guid)
--
-- Accepts guid strings in either of the following formats:
--   "HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH"     -- (36 characters)
--  "{HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH}"    -- (38 characters)
-- Terminates on wrong length, misplaced hyphens, and characters outside 0..9,A..F,a..f.
-- Returns an atom pointer to a 16-byte block of memory containing the binary guid.
-- Caller is responsible for free()ing said memory should it no longer be required,
--  though in most cases guids persist for the entire duration of the program, as
--  per the half dozen or so examples(/global constants) shortly below.
--
atom res = allocate(16)
integer nb1, nb2, byte

    if length(guid)=38 and guid[1]='{' and guid[38]='}' then guid = guid[2..37] end if
    if length(guid)!=36 then ?9/0 end if
    if guid[9]!='-' then ?9/0 end if
    if guid[14]!='-' then ?9/0 end if
    if guid[19]!='-' then ?9/0 end if
    if guid[24]!='-' then ?9/0 end if
    for i=1 to length(guid_map) by 2 do
        nb1 = guid[guid_map[i]]
        nb2 = guid[guid_map[i+1]]
        byte = gnibble(nb1)*#10+gnibble(nb2)
        poke(res+floor(i/2),byte)
    end for
    return res
end function

global function equalGUID(atom a, atom b)
-- returns true if the two guids are identical, false otherwise
    return (a==b) or (peek({a,16})==peek({b,16}))
end function

global function compareGUID(atom a, atom b)
-- returns 0 if the two guids are identical, -1 if a<b or +1 if a>b
    if a==b then return 0 end if
    return compare(peek({a,16}),peek({b,16}))
end function

--
-- A CLSID (class id) identifies a specific implementation of an interface.
-- Some classes may implement multiple interfaces.
-- An interface may be implemented by more than one class.
-- Not all interfaces will have a corresponding CLSID, for example IModalWindow and
-- IFileDialog will not, but interfaces derived from them, such as IFileOpenDialog and
-- IFileSaveDialog will (have said corresponding CLSIDs).
-- Typically HKEY_CLASSES_ROOT\CLSID\<GIUD>\InProcServer32 contains the location and
--  name of the dll that contains the actual implementation (should you wrongly care).
--
global constant atom CLSID_FileOpenDialog = GUID("DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7"),
                     CLSID_FileSaveDialog = GUID("C0B4E2F3-BA21-4773-8DBA-335EC946EB8B"),
--                   CLSID_TaskbarList = GUID (56FDF344-FD6D-11D0-958A-006097C9A090),
                     CLSID_SpVoice = GUID("96749377-3391-11D2-9EE3-00C04F797396")

--
-- An IID (interface id) uniquely identifies an interface, in other words something (else) 
-- that implements said interface will have such-and-such methods, in a specific order.
--
global constant atom IID_IUnknown = GUID("00000000-0000-0000-C000-000000000046"),
                     IID_IDispatch = GUID("{00020400-0000-0000-C000-000000000046}"),
                     IID_IFileOpenDialog = GUID("d57c7288-d4ad-4768-be02-9d969532d960"),
                     IID_IFileSaveDialog = GUID("84bccd23-5fde-4cdb-aea4-af64b83d78ab"),
                     IID_IShellItem = GUID("43826d1e-e718-42ee-bc55-a1e261c37bfe"),
                     IID_IFileDialogCustomize = GUID("E6FDD21A-163F-4975-9C8C-A69F1BA37034"),
--                   IID_IFileDialogEvents = GUID("973510db-7d7f-452b-8975-74a85828d354"),
--                   IID_ITaskbarList = GUID(56FDF342-FD6D-11D0-958A-006097C9A090),
                     IID_ISpVoice = GUID("6C44DF74-72B9-4992-A1EC-EF996E0422D4")


global procedure freeGUIDS()
--DEV if cinit
    free(CLSID_FileOpenDialog)
    free(CLSID_FileSaveDialog)
--  free(CLSID_TaskbarList)
    free(CLSID_SpVoice)
    free(IID_IUnknown)
    free(IID_IDispatch)
    free(IID_IFileOpenDialog)
    free(IID_IFileSaveDialog)
    free(IID_IShellItem)
    free(IID_IFileDialogCustomize)
--  free(IID_IFileDialogEvents)
--  free(IID_ITaskbarList)
    free(IID_ISpVoice)
end procedure

--
-- Interface definitions are basically just offsets into a vtable of function pointers.
--  There really are no function prototypes or parameter definitions, it really is a
--  matter of get it right or watch it not work: it (really!) is as simple as that.
-- (There is no particular reason why most of these are commented out, except to show
--  which of them are actively used/have been [lightly] tested.)
-- Note these constants are simply/automatically doubled when running on 64-bit.
--
global constant IUnknown_QueryInterface                         = #00,
--              IUnknown_AddRef                                 = #04,
                IUnknown_Release                                = #08,

--              IModalWindow_QueryInterface                     = IUnknown_QueryInterface,
--              IModalWindow_AddRef                             = IUnknown_AddRef,
--              IModalWindow_Release                            = IUnknown_Release,
                IModalWindow_Show                               = #0C,

--DEV should be in fileopenN.ew?:
                IFileDialog_QueryInterface                      = IUnknown_QueryInterface,
--              IFileDialog_AddRef                              = IUnknown_AddRef,
                IFileDialog_Release                             = IUnknown_Release,
                IFileDialog_Show                                = IModalWindow_Show,
                IFileDialog_SetFileTypes                        = #10,
                IFileDialog_SetFileTypeIndex                    = #14,
--              IFileDialog_GetFileTypeIndex                    = #18,
                IFileDialog_Advise                              = #1C,
                IFileDialog_Unadvise                            = #20,
                IFileDialog_SetOptions                          = #24,
                IFileDialog_GetOptions                          = #28,
                IFileDialog_SetDefaultFolder                    = #2C,
                IFileDialog_SetFolder                           = #30,
--              IFileDialog_GetFolder                           = #34,
                IFileDialog_GetCurrentSelection                 = #38,
                IFileDialog_SetFileName                         = #3C,
--              IFileDialog_GetFileName                         = #40,
--              IFileDialog_SetTitle                            = #44,
--              IFileDialog_SetOkButtonLabel                    = #48,
--              IFileDialog_SetFileNameLabel                    = #4C,
                IFileDialog_GetResult                           = #50,
--              IFileDialog_AddPlace                            = #54,
                IFileDialog_SetDefaultExtension                 = #58,
--              IFileDialog_Close                               = #5C,
--              IFileDialog_SetClientGuid                       = #60,
--              IFileDialog_ClearClientData                     = #64,
--              IFileDialog_SetFilter                           = #68,  -- (deprecated)

--              IFileDialogCustomize_QueryInterface             = IUnknown_QueryInterface,
--              IFileDialogCustomize_AddRef                     = IUnknown_AddRef,
                IFileDialogCustomize_Release                    = IUnknown_Release,
--              IFileDialogCustomize_EnableOpenDropDown         = #0C,
--              IFileDialogCustomize_AddMenu                    = #10,
--              IFileDialogCustomize_AddPushButton              = #14,
                IFileDialogCustomize_AddComboBox                = #18,
--              IFileDialogCustomize_AddRadioButtonList         = #1C,
--              IFileDialogCustomize_AddCheckButton             = #20,
--              IFileDialogCustomize_AddEditBox                 = #24,
--              IFileDialogCustomize_AddSeparator               = #28,
--              IFileDialogCustomize_AddText                    = #2C,
--              IFileDialogCustomize_SetControlLabel            = #30,
--              IFileDialogCustomize_GetControlState            = #34,
--              IFileDialogCustomize_SetControlState            = #38,
--              IFileDialogCustomize_GetEditBoxText             = #3C,
--              IFileDialogCustomize_SetEditBoxText             = #40,
--              IFileDialogCustomize_GetCheckButtonState        = #44,
--              IFileDialogCustomize_SetCheckButtonState        = #48,
                IFileDialogCustomize_AddControlItem             = #4C,
--              IFileDialogCustomize_RemoveControlItem          = #50,
--              IFileDialogCustomize_RemoveAllControlItems      = #54,
--              IFileDialogCustomize_GetControlItemState        = #58,
--              IFileDialogCustomize_SetControlItemState        = #5C,
                IFileDialogCustomize_GetSelectedControlItem     = #60,
                IFileDialogCustomize_SetSelectedControlItem     = #64,
                IFileDialogCustomize_StartVisualGroup           = #68,
                IFileDialogCustomize_EndVisualGroup             = #6C,
--              IFileDialogCustomize_MakeProminent              = #70,
--              IFileDialogCustomize_SetControlItemText         = #74,

--              IFileDialogEvents_QueryInterface                = IUnknown_QueryInterface,
--              IFileDialogEvents_AddRef                        = IUnknown_AddRef,
--              IFileDialogEvents_Release                       = IUnknown_Release,
--              IFileDialogEvents_OnFileOk                      = #0C,
--              IFileDialogEvents_OnFolderChanging              = #10,
--              IFileDialogEvents_OnFolderChange                = #14,
--              IFileDialogEvents_OnSelectionChange             = #18,
--              IFileDialogEvents_OnShareViolation              = #1C,
--              IFileDialogEvents_OnTypeChange                  = #20,
--              IFileDialogEvents_OnOverwrite                   = #24,

--              IFileOpenDialog_QueryInterface                  = IUnknown_QueryInterface,
--              IFileOpenDialog_AddRef                          = IUnknown_AddRef,
--              IFileOpenDialog_Release                         = IUnknown_Release,
--              IFileOpenDialog_Show                            = IModalWindow_Show,
--              IFileOpenDialog_SetFileTypes                    = IFileDialog_SetFileTypes,
--              IFileOpenDialog_SetFileTypeIndex                = IFileDialog_SetFileTypeIndex,
--              IFileOpenDialog_GetFileTypeIndex                = IFileDialog_GetFileTypeIndex,
--              IFileOpenDialog_Advise                          = IFileDialog_Advise,
--              IFileOpenDialog_Unadvise                        = IFileDialog_Unadvise,
--              IFileOpenDialog_SetOptions                      = IFileDialog_SetOptions,
--              IFileOpenDialog_GetOptions                      = IFileDialog_GetOptions,
--              IFileOpenDialog_SetDefaultFolder                = IFileDialog_SetDefaultFolder,
--              IFileOpenDialog_SetFolder                       = IFileDialog_SetFolder,
--              IFileOpenDialog_GetFolder                       = IFileDialog_GetFolder,
--              IFileOpenDialog_GetCurrentSelection             = IFileDialog_GetCurrentSelection,
--              IFileOpenDialog_SetFileName                     = IFileDialog_SetFileName,
--              IFileOpenDialog_GetFileName                     = IFileDialog_GetFileName,
--              IFileOpenDialog_SetTitle                        = IFileDialog_SetTitle,
--              IFileOpenDialog_SetOkButtonLabel                = IFileDialog_SetOkButtonLabel,
--              IFileOpenDialog_SetFileNameLabel                = IFileDialog_SetFileNameLabel,
--              IFileOpenDialog_GetResult                       = IFileDialog_GetResult,
--              IFileOpenDialog_AddPlace                        = IFileDialog_AddPlace,
--              IFileOpenDialog_SetDefaultExtension             = IFileDialog_SetDefaultExtension,
--              IFileOpenDialog_Close                           = IFileDialog_Close,
--              IFileOpenDialog_SetClientGuid                   = IFileDialog_SetClientGuid,
--              IFileOpenDialog_ClearClientData                 = IFileDialog_ClearClientData,
--              IFileOpenDialog_SetFilter                       = IFileDialog_SetFilter,  -- (deprecated)
                IFileOpenDialog_GetResults                      = #6C,
--              IFileOpenDialog_GetSelectedItems                = #70,

--              IFileSaveDialog_QueryInterface                  = IUnknown_QueryInterface,
--              IFileSaveDialog_AddRef                          = IUnknown_AddRef,
--              IFileSaveDialog_Release                         = IUnknown_Release,
--              IFileSaveDialog_Show                            = IModalWindow_Show,
--              IFileSaveDialog_SetFileTypes                    = IFileDialog_SetFileTypes,
--              IFileSaveDialog_SetFileTypeIndex                = IFileDialog_SetFileTypeIndex,
--              IFileSaveDialog_GetFileTypeIndex                = IFileDialog_GetFileTypeIndex,
--              IFileSaveDialog_Advise                          = IFileDialog_Advise,
--              IFileSaveDialog_Unadvise                        = IFileDialog_Unadvise,
--              IFileSaveDialog_SetOptions                      = IFileDialog_SetOptions,
--              IFileSaveDialog_GetOptions                      = IFileDialog_GetOptions,
--              IFileSaveDialog_SetDefaultFolder                = IFileDialog_SetDefaultFolder,
--              IFileSaveDialog_SetFolder                       = IFileDialog_SetFolder,
--              IFileSaveDialog_GetFolder                       = IFileDialog_GetFolder,
--              IFileSaveDialog_GetCurrentSelection             = IFileDialog_GetCurrentSelection,
--              IFileSaveDialog_SetFileName                     = IFileDialog_SetFileName,
--              IFileSaveDialog_GetFileName                     = IFileDialog_GetFileName,
--              IFileSaveDialog_SetTitle                        = IFileDialog_SetTitle,
--              IFileSaveDialog_SetOkButtonLabel                = IFileDialog_SetOkButtonLabel,
--              IFileSaveDialog_SetFileNameLabel                = IFileDialog_SetFileNameLabel,
--              IFileSaveDialog_GetResult                       = IFileDialog_GetResult,
--              IFileSaveDialog_AddPlace                        = IFileDialog_AddPlace,
--              IFileSaveDialog_SetDefaultExtension             = IFileDialog_SetDefaultExtension,
--              IFileSaveDialog_Close                           = IFileDialog_Close,
--              IFileSaveDialog_SetClientGuid                   = IFileDialog_SetClientGuid,
--              IFileSaveDialog_ClearClientData                 = IFileDialog_ClearClientData,
--              IFileSaveDialog_SetFilter                       = IFileDialog_SetFilter,  -- (deprecated)
--              IFileSaveDialog_SetSaveAsItem                   = #6C,
--              IFileSaveDialog_SetProperties                   = #70,
--              IFileSaveDialog_SetCollectedProperties          = #74,
--              IFileSaveDialog_GetProperties                   = #78,
--              IFileSaveDialog_ApplyProperties                 = #7C,

--              IShellItem_QueryInterface                       = IUnknown_QueryInterface,
--              IShellItem_AddRef                               = IUnknown_AddRef,
                IShellItem_Release                              = IUnknown_Release,
--              IShellItem_BindToHandler                        = #0C,
--              IShellItem_GetParent                            = #10,
                IShellItem_GetDisplayName                       = #14,
--              IShellItem_GetAttributes                        = #18,
--              IShellItem_Compare                              = #1C,

--              IShellItemArray_QueryInterface                  = IUnknown_QueryInterface,
--              IShellItemArray_AddRef                          = IUnknown_AddRef,
                IShellItemArray_Release                         = IUnknown_Release,
--              IShellItemArray_BindToHandler                   = #0C,
--              IShellItemArray_GetPropertyStore                = #10,
--              IShellItemArray_GetPropertyDescriptionList      = #14,
--              IShellItemArray_GetAttributes                   = #18,
                IShellItemArray_GetCount                        = #1C,
                IShellItemArray_GetItemAt                       = #20,
--              IShellItemArray_EnumItems                       = #24,

--              IUnknown:
--              ISpVoice_QueryInterface                         = IUnknown_QueryInterface,
--              ISpVoice_AddRef                                 = IUnknown_AddRef,
--              ISpVoice_Release                                = IUnknown_Release,
--              ISpNotifySource:
--              ISpVoice_SetNotifySink                          = #0C,
--              ISpVoice_SetNotifyWindowMessage                 = #10,
                ISpVoice_SetNotifyCallbackFunction              = #14,
--              ISpVoice_SetNotifyCallbackInterface             = #18,
--              ISpVoice_SetNotifyWin32Event                    = #1C,
--              ISpVoice_WaitForNotifyEvent                     = #20,
--              ISpVoice_GetNotifyEventHandle                   = #24,
--              ISpEventSource:
                ISpVoice_SetInterest                            = #28,
                ISpVoice_GetEvents                              = #2C,
--              ISpVoice_GetInfo                                = #30,
--              ISpVoice:
--              ISpVoice_SetOutput                              = #34,
--              ISpVoice_GetOutputObjectToken                   = #38,
--              ISpVoice_GetOutputStream                        = #3C,
--              ISpVoice_Pause                                  = #40,
--              ISpVoice_Resume                                 = #44,
--              ISpVoice_SetVoice                               = #48,
--              ISpVoice_GetVoice                               = #4C,
                ISpVoice_Speak                                  = #50,
--   Speak as function(byval as ISpVoice ptr, byval pwcs as wstring ptr, byval dwFlags as DWORD, byval pulStreamNumber as ULONG ptr) as HRESULT
--              ISpVoice_SpeakStream                            = #54,
                ISpVoice_GetStatus                              = #58,
--              ISpVoice_Skip                                   = #5C,
--              ISpVoice_SetPriority                            = #60,
--              ISpVoice_GetPriority                            = #64,
--              ISpVoice_SetAlertBoundary                       = #68,
--              ISpVoice_GetAlertBoundary                       = #6C,
--              ISpVoice_SetRate as function(byval as ISpVoice ptr, byval RateAdjust as integer) as HRESULT
--              ISpVoice_GetRate as function(byval as ISpVoice ptr, byval RateAdjust as integer ptr) as HRESULT
--              ISpVoice_SetVolume as function(byval as ISpVoice ptr, byval usVolume as ushort) as HRESULT
--              ISpVoice_GetVolume as function(byval as ISpVoice ptr, byval pusVolume as ushort ptr) as HRESULT
--              ISpVoice_WaitUntilDone as function(byval as ISpVoice ptr, byval msTimeout as ULONG) as HRESULT      
--              ISpVoice_SetSyncSpeakTimeout
--              ISpVoice_GetSyncSpeakTimeout
--              ISpVoice_SpeakCompleteEvent
--              ISpVoice_IsUISupported
--              ISpVoice_DisplayUI
--/*
To test your setup, try running these:
C:\Windows\SysWOW64\Speech\SpeechUX\sapi.cpl
C:\Windows\System32\Speech\SpeechUX\sapi.cpl
--*/
$

global constant
  COINIT_APARTMENTTHREADED  = 0x2,
  COINIT_MULTITHREADED      = 0x0,
  COINIT_DISABLE_OLE1DDE    = 0x4,
  COINIT_SPEED_OVER_MEMORY  = 0x8

global procedure CoInitializeEx(integer dwCoInit=COINIT_MULTITHREADED)
--
-- Note : The first parameter of the C function, pvReserved, must always
--        be NULL, and hence is provided automatically by this function.
--        CoInitialize([NULL]) is technically [more] equivalent to
--        CoInitializeEx([NULL,]COINIT_APARTMENTTHREADED), however
--        a) COINIT_MULTITHREADED carries less overhead and in the 
--          single-threaded case it makes little or no difference.
--          [In a multi-threaded situtation you may need a bit
--           more locking, usually in the form of enter_cs().]
--        b) COINIT_APARTMENTTHREADED does not work properly if it
--          is invoked from the main (GUI) thread anyway.
--
-- Also: In C this can be called multiple times, however secondary calls 
--       achieve precisely nothing, every call must have a corresponding 
--       CoUninitialize(), and in the COINIT_APARTMENTTHREADED case must 
--       be from the same thread.
--       Instead this [more] simply terminates in error if called twice.
--
-- This routine should only ever be called from with a similar guard:
    if platform()!=WINDOWS then ?9/0 end if

integer res
    #ilASM{
            [32]
                mov eax,[dwCoInit]
                push eax                            -- dwCoInit (flags)
                push ebx                            -- pvReserved (NULL)
                call "ole32.dll","CoInitializeEx"
                mov [res],eax
            [64]
                mov rcx,rsp -- put 2 copies of rsp onto the stack...
                push rsp
                push rcx
                or rsp,8    -- [rsp] is now 1st or 2nd copy:
                            -- if on entry rsp was xxx8: both copies remain on the stack
                            -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
                            -- obviously rsp is now xxx8, whatever alignment we started with
                mov rdx,[dwCoInit]                  -- dwCoInit (p2)
                sub rsp,8*5                         -- minimum 4 param shadow space, and align
--              mov rdx,rax                         -- dwCoInit (p2)
                mov rcx,rbx                         -- pvReserved (p1/NULL)
                call "ole32.dll","CoInitializeEx"
                mov [res],rax
--              add rsp,8*5
--              pop rsp
                mov rsp,[rsp+8*5]   -- equivalent to the add/pop
            []
          }
    if res!=S_OK then ?9/0 end if
end procedure

global procedure CoUnInitialize()
    if platform()!=WINDOWS then ?9/0 end if
    #ilASM{
            [32]
                call "ole32.dll","CoUninitialize"
            [64]
--              call "ole32.dll","CoUninitialize"
                mov rcx,rsp -- put 2 copies of rsp onto the stack...
                push rsp
                push rcx
                or rsp,8    -- [rsp] is now 1st or 2nd copy:
                            -- if on entry rsp was xxx8: both copies remain on the stack
                            -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
                            -- obviously rsp is now xxx8, whatever alignment we started with
                sub rsp,8*5                         -- minimum 4 param shadow space, and align
                call "ole32.dll","CoInitializeEx"
--              add rsp,8*5
--              pop rsp
                mov rsp,[rsp+8*5]   -- equivalent to the add/pop
            []
          }
end procedure

global function CoCreateInstance(atom rclsid, riid, ppv, integer dwClsContext=CLSCTX_ALL, atom pUnkOuter=NULL)
-- Note args are in a different order to C (rclsid,pUnkOuter,dwClsContext,riid,ppv), for improved defaulting.
atom hr
    #ilASM{
            [32]
                mov eax,[ppv]
                call :%pLoadMint
                push eax                            -- ppv
                mov eax,[riid]
                call :%pLoadMint
                push eax                            -- riid
                mov eax,[dwClsContext]
                call :%pLoadMint
                push eax                            -- dwClsContext
                mov eax,[pUnkOuter]
                call :%pLoadMint
                push eax                            -- pUnkOuter
                mov eax,[rclsid]
                call :%pLoadMint
                push eax                            -- rclsid
                call "ole32.dll","CoCreateInstance"
                lea edi,[hr]        
                call :%pStoreMint
            [64]
                -- standard (Windows API) calling convention applies: 
                -- first 4 parameters are passed in rcx/rdx/r8/r9 (or xmm0..3),
                -- caller (ie this code) must allocate >=32 bytes of shadow space.
                -- logically: p1/rcx at [rsp], p2/rdx at [rsp+8], p3/r8 at [rsp+16],
                -- p4/r9 at [rsp+24], then: p5 in [rsp+32], p6 in [rsp+40], etc.
                -- rax/rcx/rdx/r8/r9/r10/r11 are damaged, as are xmm0..5 and st0..7
                -- rbx/rbp/rdi/rsi/r12/r13/r14/r15 are preserved (as are xmm6..15)
                -- result in rax or xmm0

                mov rcx,rsp -- put 2 copies of rsp onto the stack...
                push rsp
                push rcx
                or rsp,8    -- [rsp] is now 1st or 2nd copy:
                            -- if on entry rsp was xxx8: both copies remain on the stack
                            -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
                            -- obviously rsp is now xxx8, whatever alignment we started with
                sub rsp,8*5                         -- minimum 4 param shadow space, and align
                mov rax,[ppv]
                call :%pLoadMint
                mov [rsp+32],rax                    -- ppv (p5)
                mov rax,[riid]
                call :%pLoadMint
                mov r9,rax                          -- riid (p4)
                mov rax,[dwClsContext]
                call :%pLoadMint
                mov r8,rax                          -- dwClsContext (p3)
                mov rax,[pUnkOuter]
                call :%pLoadMint
                mov rdx,rax                         -- pUnkOuter (p2)
                mov rax,[rclsid]
                call :%pLoadMint
                mov rcx,rax                         -- rclsid (p1)
                call "ole32.dll","CoCreateInstance"
                lea rdi,[hr]        
                call :%pStoreMint
--              add rsp,8*5
--              pop rsp
                mov rsp,[rsp+8*5]   -- equivalent to the add/pop
            []
          }
    return hr
end function

--integer rlen -- (for test code at the end)

--DEV should probably be in fileopenN.ew:
global function COMDLG_FILTERSPEC(sequence filters)
--
-- filters should be something like { {"Text Document (*.txt)", "*.txt"}, 
--                                    {"All Documents (*.*)", "*.*"} }
-- The text strings can be ansi or utf8.
-- Returns an atom pointer to allocated memory containing a table of internal
--  pointers to the text (also in "") expanded to WideChar (utf16le) format.
-- Caller is responsible for free()ing said memory when no longer required.
--
sequence fi         -- (as I want the typechecking)
string fi1, fi2     -- (as I want the typechecking)
integer len = 0
atom res,           -- result
     ptraddr,       -- where (in "") pointers to strings get poked 
     straddr = 0    -- where (in "") strings get poked

    for i=1 to length(filters) do
        fi = filters[i]
        if length(fi)!=2 then ?9/0 end if
        {fi1,fi2} = fi
--DEV/SUG store in sequences len1[i],len2[i] for re-use.
        len += c_func(xMultiByteToWideChar,{CP_UTF8,0,fi1,-1,NULL,0})
        len += c_func(xMultiByteToWideChar,{CP_UTF8,0,fi2,-1,NULL,0})
--22/11/16:
--      straddr += 8
        straddr += machine_word()*2
    end for
--  rlen = straddr+len*2
--  res = allocate(rlen)
    res = allocate(straddr+len*2)
    ptraddr = res
    straddr += res -- (==res+length(filters)*8)
    for i=1 to length(filters) do
        fi = filters[i]
        {fi1,fi2} = fi
--22/11/16:
--      poke4(ptraddr,straddr)
        pokeN(ptraddr,straddr,machine_word())
--22/11/16:
--      ptraddr += 4
        ptraddr += machine_word()
        len = c_func(xMultiByteToWideChar,{CP_UTF8,0,fi1,-1,NULL,0})
        straddr += c_func(xMultiByteToWideChar,{CP_UTF8,0,fi1,-1,straddr,len})*2
--      poke4(ptraddr,straddr)
        pokeN(ptraddr,straddr,machine_word())
--      ptraddr += 4
        ptraddr += machine_word()
        len = c_func(xMultiByteToWideChar,{CP_UTF8,0,fi2,-1,NULL,0})
        straddr += c_func(xMultiByteToWideChar,{CP_UTF8,0,fi2,-1,straddr,len})*2
    end for
    return res
end function

global function unicode_string(string utf8str,bool cleanup=true)
-- Returns an atom pointer to memory containing the ansi/utf8 input converted to a null-word (#0000) terminated WideString.
-- By default the memory will be cleaned up automatically, unless the second parameter is false in which case the caller 
-- is responsible for invoking free() once the WideString result is no longer required.
atom res
integer len
    len = c_func(xMultiByteToWideChar,{CP_UTF8,0,utf8str,-1,NULL,0})
    res = allocate(len*2,cleanup)
    len = c_func(xMultiByteToWideChar,{CP_UTF8,0,utf8str,-1,res,len})
    return res
end function

global function peek_unicode_string(atom pInBuff)
-- Returns an ansi/utf8 string converted from the passed pointer to WideString (pInBuff).
-- Caller may or may not need to free(pInBuff) [or CoTaskMemFree(pInBuff)], whereas the
--  return value (a normal string) should take care of itself.
integer nLen
atom pOutBuff
string res
    nLen = c_func(xWideCharToMultiByte,{CP_UTF8,0,pInBuff,-1,NULL,0,NULL,NULL})
    pOutBuff = allocate(nLen)
    nLen = c_func(xWideCharToMultiByte,{CP_UTF8,0,pInBuff,-1,pOutBuff,nLen,NULL,NULL})
    res = peek({pOutBuff,nLen-1})
    free(pOutBuff)
    return res
end function

global function create_com_object(sequence vtable)
--
-- vtable is a full set of all the rqd interface methods in the right order.
--  For example IFileDialogEvents needs the ten methods (call_backs) as listed 
--  above, ie IFileDialogEvents_QueryInterface..IFileDialogEvents_OnOverwrite.
--  Note there are no function prototypes etc, it is simply a matter of get it
--  /all/ right or watch it not work; cryptic error code: only if you are lucky.
-- Returns an atom pointer to a bare minimum COM object containing 
--  a {<pointer to vtable>,refcount} pair, and the vtable itself.
-- 
--DEV 64 bit?
--atom res = allocate(8+length(vtable)*4)
atom res = allocate((length(vtable)+2)*machine_word())
--  poke4(res,{res+8,0}&vtable)
    pokeN(res,{res+2*machine_word(),0}&vtable,machine_word())
    return res
end function

sequence com_error_codes
sequence com_error_names
integer com_error_init = 0

procedure comErrorInit(atom error_code, string error_desc)
    com_error_codes = append(com_error_codes,error_code)
    com_error_names = append(com_error_names,error_desc)
end procedure

function com_error_name(atom error_code)
    if not com_error_init then
        com_error_init = 1
        com_error_codes = {}
        com_error_names = {"unknown"} -- (if find() yields 0, show this. subsequent codes/names are therefore "staggered" by 1.)
        comErrorInit(E_NOTIMPL,         "E_NOTIMPL")
        comErrorInit(E_NOINTERFACE,     "E_NOINTERFACE")
        comErrorInit(E_FAIL,            "E_FAIL")
        comErrorInit(E_INVALIDARG,      "E_INVALIDARG")
        comErrorInit(ERROR_CANCELLED,   "ERROR_CANCELLED")
        -- feel free to add more here... (any that actually trigger, not all 273,851 at once please ;-)
    end if
    return com_error_names[find(error_code,com_error_codes)+1]
end function

global function cominvk_imm(atom pInterface,integer vIdx,sequence params, integer bDebug=DEBUG)
--
-- pInterface is usually a parameter to a call_back. Unlike cominvk() [below],
--  when creation involves allocate(4) and CoCreateInstance/QueryInterface, an
--  extra peek4u() is required, so (obviously) we use cominvk_imm in the rarer
--  cases when we need to avoid that peek. If in doubt, use trial and error to
--  decide whether you need to use cominvk() or cominvk_imm().
-- vIdx is an offset into the vtable, eg constant IFileDialog_Show (= #0C).
-- params is a sequence of atoms, eg flags, ids, or the results from calls to
--  unicode_string() or allocate(4) [both of which caller must free()], etc.
--  Note that some elements of params may require a peek4u, most should not,
--       but if in doubt, erm, you'll have to use good old trial and error.
-- Pass an extra 0 to override (switch off) debug handling on specific calls
--  that you expect to (sometimes) fail (eg IFileDialog_GetCurrentSelection),
--  or pass an extra 1 on new code that you are just adding.
--
-- Returns S_OK on success, otherwise a HRESULT error code. Note that these
--  are unsigned, so use and_bits(hResult,#80000000) instead of hResult<0,
--  but you can compare directly against eg constant E_FAIL (=#80004005).
--
integer local_ebp4, la
atom res
    if and_bits(vIdx,#03) then
        #ilASM { ::kaboom }
        ?9/0
    end if

    if machine_bits()=64 then
        --DEV actually, this should be more like pHeap.e/pGetMem... (nah, this shd be fine...)
        la = length(params)
        if la<4 then
            params &= repeat(0,4-la)
--          argdefs &= repeat(#01000004,5-la)
        elsif remainder(la,2)=1 then
            params &= 0
--          argdefs &= #01000004    -- (C_INT)
        end if
        la = length(params)
        #ilASM{
            [PE64]
                mov rcx,rsp -- put 2 copies of rsp onto the stack...
                push rsp
                push rcx
                or rsp,8    -- [rsp] is now 1st or 2nd copy:
                            -- if on entry rsp was xxx8: both copies remain on the stack
                            -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
                            -- obviously rsp is now xxx8, whatever alignment we started with
--          sub rsp,8*5                             -- minimum 4 param shadow space, and align/somewhere to save rax
--          mov [rsp+32],rax                        -- save rax (required length)
--          call "kernel32.dll","GetProcessHeap"
--          mov r8,[rsp+32]                         -- dwBytes (p3)
--          mov rdx,rbx                             -- dwFlags (p2,0)
--          mov rcx,rax                             -- hHeap (p1)
--          call "kernel32.dll","HeapAlloc"
--          add rsp,8*5
--          pop rsp
--          mov rsp,[rsp+8*5]   -- equivalent to the add/pop

--          [ELF64]
--              pop al
            []              
              }
    end if

    if string(params) and length(params) then
        params &= -1    -- force conversion to dword-sequence
        params = params[1..$-1]
    end if
--27/8/18:
try
    #ilASM{
        [32]
--          call :%save_ebp         -- (see pcfunc.e)
--          mov [local_ebp4],eax
--DEV not convinced this is necessary:
            mov edx,ebp
--mov esi,1
            call :%pSetSaveEBP
            shr eax,2
            mov [local_ebp4],eax

            mov esi,[params]
            mov ecx,[ebx+esi*4-12]  -- length
            shl esi,2
            cmp ecx,0
            je :zeroparams
          ::paramloop
                mov eax,[esi+ecx*4-4]
                cmp eax,h4
                jl @f
                    sub esp,8
                    cmp byte[ebx+eax*4-1],0x12          -- (ebx==0)
                    jne :kaboom
                    fld qword[ebx+eax*4]
                    fistp qword[esp]
                    pop eax
                    add esp,4
              @@:
                push eax
                sub ecx,1
                jnz :paramloop          
          ::zeroparams
            mov eax,[pInterface]
            mov edx,[vIdx]
            push eax
--DEV 23/10/15 fatal exception here...
            mov eax,[eax]
--          call [eax+edx]
            mov ecx,[eax+edx]
            call ecx
            xor ebx,ebx
            lea edi,[res]
            push ebx
            push eax
            fild qword[esp]
            add esp,8
--          call %opMovbi       -- call StoreFlt ([edi]:=ST0)
            call :%pStoreFlt    -- ([edi]:=ST0)
--DEV:??
--      @@:
--          mov edx,[local_ebp4]
--          call :%restore_ebp
--DEV not convinced this is necessary:
            mov edx,[local_ebp4]
            shl edx,2
--mov esi,-1
            call :%pSetSaveEBP

        [64]
--          pop al

--  --DEV not convinced this is necessary:
            mov rdx,rbp
--  --mov esi,1
            call :%pSetSaveEBP
            shr rax,2
            mov [local_ebp4],rax

            mov rsi,[params]
            mov r15,h4
--          mov rcx,[rbx+rsi*4-24]  -- length
            mov rcx,[la]
            shl rsi,2
            cmp rcx,0
            je :zeroparams
          ::paramloop
                mov rax,[rsi+rcx*8-8]
                cmp rax,r15
                jl @f
                    sub rsp,8
                    cmp byte[rbx+rax*4-1],0x12          -- (ebx==0)
                    jne :kaboom
                    fld tbyte[rbx+rax*4]
--DEV untested:
                    mov r15,h4

                    -- if uint>#7FFF... then uint-=#1_0000...
                    push r15            -- #4000_0000_0000_0000
                    fild qword[rsp]
                    fadd st0,st0        -- #8000_0000_0000_0000
                    fld st1
                    fcomp
                    fnstsw ax
                    sahf
                    jb :below80
                        fadd st0,st0    -- #1_0000_0000_0000_0000
                        fsub st1,st0
                  ::below80
                    fstp st0            -- discard

                    fistp qword[rsp]
                    pop rax
              @@:
                push rax
                sub rcx,1
                jnz :paramloop          
          ::zeroparams
            mov rax,[pInterface]            
            mov rdx,[vIdx]
            push rax
--DEV 23/10/15 fatal exception here... (when it was 32 bit)
            mov rax,[rax]
--          call [eax+edx]
--          mov rbx,[rax+rdx]
            mov rbx,[rax+rdx*2]

            mov rcx,[rsp]
            mov rdx,[rsp+8]
            mov r8,[rsp+16]
            mov r9,[rsp+24]

            call rbx
            xor rbx,rbx
            lea rdi,[res]
--          push ebx
            push rax
            fild qword[rsp]
            add rsp,8
            call :%pStoreFlt    -- ([rdi]:=ST0)
--  --DEV not convinced this is necessary:
            mov rdx,[local_ebp4]
            shl rdx,2
--  --mov esi,-1
            call :%pSetSaveEBP

            mov rcx,[la]
            mov rsp,[rsp+rcx*8+8]   -- equivalent to the add/pop

        []
    }
catch e
    -- occasional (~monthly for me) errors as per 23/10/15
    -- perhaps a retry or something might be in order...
    ?{"pComN.ew line 725",e}
    return E_FAIL
end try
    if bDebug then
--      if res<S_OK then
        if and_bits(res,#80000000) then
            printf(1,"COM error %08x [%s] (%08x:%02x %s)\n",{res,com_error_name(res),pInterface,vIdx,sprint(params)})
--          trace(1)
        end if
    end if
    return res
end function

global function cominvk(atom pInterface,integer vIdx,sequence params, integer bDebug=DEBUG)
--
-- pInterface is eg constant pFileDialog = allocate(4), the content of which
--  has typically been populated via CoCreateInstance or QueryInterface, or 
--  for that matter, I nearly forgot about our very own, create_com_object().   [?]
-- Other possibilities and parameters are documented in cominvk_imm() above.
--
--22/11/16:
--  return cominvk_imm(peek4u(pInterface),vIdx,params,bDebug)
--  return cominvk_imm(peekNS(pInterface,machine_word(),0),vIdx,params,bDebug)
    return cominvk_imm(peeknu(pInterface),vIdx,params,bDebug)
end function

global function com_release(atom pIUnknown)
    {} = cominvk(pIUnknown,IUnknown_Release,{})
    return NULL
end function


-- some old test code:
--constant filters = { {"Word Document (*.doc)",      "*.doc"}, 
--                   {"Web Page (*.htm; *.html)", "*.htm;*.html"}, 
--                   {"Text Document (*.txt)",    "*.txt"}, 
--                   {"All Documents (*.*)",      "*.*"} }
--constant c_rgSaveTypes = COMDLG_FILTERSPEC(filters)
--constant c_size = length(filters)

--?c_rgSaveTypes
--for i=1 to rlen do
--  if remainder(i-1,16)=0 then
--      printf(1,"\n%08x ",c_rgSaveTypes+i-1)
--  end if
--  printf(1," %02x",peek(c_rgSaveTypes+i-1))
--end for
--puts(1,"\n")
--if getc(0) then end if

