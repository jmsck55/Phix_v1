--
-- t04unary.exw
--
-- Phix tests for all aspects of unary op (-, not, and possibly +) handling.
--
-- See seqop.e for tests on strings and sequences
--
function uminus(atom o)
    return -o
end function

function unot(atom o)
    return not o
end function

integer i,j
atom n,m
atom a,b
--string s,t
--sequence p,q
object O,P
--integer RDS
--atom t0 t0=time()
--  RDS=1

-- some changes needed here for pwa/p2js (remark added to p2js.htm/technicalia):
    if (not 0)!=1 then crash("(not 0)!=1") end if
    if (not 1)!=0 then crash("(not 1)!=0") end if
    if (1=1)!=1 then crash("(1=1)!=1") end if
    if (not (0=1))!=1 then crash("(not (0=1))!=1") end if
--  if (not 0=1)!=1 then crash("(not 0=1)!=0") end if
    if (not 0=true)!=1 then crash("(not 0=1)!=0") end if
--  if ((not 0)=1)!=1 then crash("((not 0)=1)!=0") end if   -- (same as prev line)
    if ((not 0)=true)!=1 then crash("((not 0)=1)!=0") end if    -- (same as prev line)
    if (not (1=1))!=0 then crash("(not (1=1))!=0") end if
    if (not 1=1)!=0 then crash("(not 1=1)!=0") end if
    if ((not 1)=1)!=0 then crash("((not 1)=1)!=0") end if   -- (same as prev line)
    if (1=2)!=0 then crash("(1=2)!=0") end if
    if (not (1=2))!=1 then crash("(not (1=2))!=1") end if
    if (not 1=2)!=0 then crash("(not 1=2)!=0") end if
    if ((not 1)=2)!=0 then crash("((not 1)=2)!=0") end if   -- (same as prev line)
    -- added 14/3/21 for pwa/p2js, seems OK:
    if (6+true)!=7 then crash("(6+true)!=7") end if
--for x=1 to 10000 do
    i=1
    j=-i
    if j!=uminus(i) then crash("j!=uminus(i)\n") end if
    if uminus(i)!=j then crash("uminus(i)!=j\n") end if
    if -j=uminus(i) then crash("-j=uminus(i)\n") end if
    if uminus(i)=-j then crash("uminus(i)=-j\n") end if
    if j!=-i then crash("j!=-i\n") end if
    if -j!=i then crash("j!=-i\n") end if

    n=1
--DEV
--  j=floor(-n)
--  j=-n
    if j!=uminus(n) then crash("j!=uminus(n)\n") end if
    if -j=uminus(n) then crash("-j=uminus(n)\n") end if
    if j!=-n then crash("j!=-n\n") end if
    if -j!=n then crash("-j!=n\n") end if
    if n!=-j then crash("n!=-j\n") end if
    if -n!=j then crash("-n!=j\n") end if

    n=1.5
    m=-n
    if m!=uminus(n) then crash("m!=uminus(n)\n") end if
    if -m=uminus(n) then crash("-m=uminus(n)\n") end if
    if m!=-n then crash("j!=-n\n") end if

    a=1.0
    b=-1
    if a!=uminus(b) then crash("a!=uminus(b)\n") end if
    if -b=uminus(a) then crash("-b=uminus(a)\n") end if
    if a!=-b then crash("a!=-b\n") end if

    O=i
    if j!=uminus(O) then crash("j!=uminus(O)\n") end if
    if -j=uminus(O) then crash("-j=uminus(O)\n") end if
    if j!=-O then crash("j!=-O\n") end if

    O=n
    if m!=uminus(O) then crash("m!=uminus(O)\n") end if
    if -m=uminus(O) then crash("-m=uminus(O)\n") end if
    if m!=-O then crash("m!=-O\n") end if

    P=m
    if P!=uminus(O) then crash("P!=uminus(O)\n") end if
    if -P=uminus(O) then crash("-P=uminus(O)\n") end if
    if P!=-O then crash("P!=-O\n") end if
    if -P!=O then crash("-P!=O\n") end if

    i=1
    j=not i -- 0
    if j!=unot(i) then crash("j!=unot(i)\n") end if
    if unot(j)!=i then crash("unot(j)!=i\n") end if
    if not (j=unot(i)) then crash("not (j=unot(i))\n") end if
    if not j=unot(i) then crash("not j=unot(i)\n") end if
    if (not j)=unot(i) then crash("(not j)=unot(i)\n") end if   -- (same as prev line)
    if unot(i)=not j then crash("unot(i)=not j\n") end if
    if j!=not i then crash("j!=not i\n") end if
    if not (j!=i) then crash("not (j!=i)\n") end if
    if not j!=i then crash("not j!=i\n") end if
    if (not j)!=i then crash("(not j)!=i\n") end if             -- (same as prev line)
    O=i
    if j!=unot(O) then crash("j!=unot(O)\n") end if
    if not (j=unot(O)) then crash("not (j=unot(O))\n") end if
    if not j=unot(O) then crash("not j=unot(O)\n") end if
    if (not j)=unot(O) then crash("(not j)=unot(O)\n") end if   -- (same as prev line)
    if j!=not O then crash("j!=not O\n") end if

    i=0
    j=not i -- 1
    if j!=unot(i) then crash("j!=unot(i)\n") end if
    if unot(j)!=i then crash("unot(j)!=i\n") end if
    if not (j=unot(i)) then crash("not (j=unot(i))\n") end if
    if not j=unot(i) then crash("not j=unot(i)\n") end if
    if (not j)=unot(i) then crash("(not j)=unot(i)\n") end if   -- (same as prev line)
    if unot(i)=not j then crash("unot(i)=not j\n") end if
    if j!=not i then crash("j!=not i\n") end if
    if not (j!=i) then crash("not (j!=i)\n") end if
    if not j!=i then crash("not j!=i\n") end if
    if (not j)!=i then crash("(not j)!=i\n") end if             -- (same as prev line)
    O=i
    if j!=unot(O) then crash("j!=unot(O)\n") end if
    if not (j=unot(O)) then crash("not j=unot(O)\n") end if
    if not j=unot(O) then crash("not j=unot(O)\n") end if
    if (not j)=unot(O) then crash("(not j)=unot(O)\n") end if   -- (same as prev line)
    if j!=not O then crash("j!=not O\n") end if

--end for


-- Added 08/06/2012: Inlining more maths (in Expr()) exposed a problem
--                   whereby -MININT was being left tagged an integer
--                   (when it is of course equal to MAXINT+1, an atom)

constant MAXINT = #3FFFFFFF,
         MININT = -MAXINT-1

integer dmax
    dmax = MININT
    dmax = dmax -- suppress unused warnings

atom p
procedure NewDoubleSym(atom d)
    p = d
end procedure

    NewDoubleSym(-MININT)


