--
-- t28sprint.exw
--
-- Phix tests for the sprintf() function.
--
with javascript_semantics

--/* Not required for Phix:
type string(object s) return sequence(s) end type
--*/
constant showprogress=0

-- this got itself broken under O2:
integer x
        x = 0
function fx(integer charflag)
    x=0
    if charflag='e' or (charflag='g' and (x>9 or x<-4)) then
--      puts(1,"ERROR\n")
--      if getc(0) then end if
        return 0
    end if
    return 1
end function

if not fx('g') then crash("fx error\n") end if

if floor(1.99)!=1 then crash("floor(1.99)!=1\n") end if -- not really part of this test,
                                                        -- but let's not worry about that.

procedure test(string prg, fmt, msg, object args, expected)
    if showprogress then puts(1,prg) end if
    string tmp = sprintf(fmt,args)
    if string(expected) then
        if tmp!=expected then
            crash(msg & " - " & tmp & " != " & expected)
        end if
    elsif not find(tmp,expected) then
        crash(msg & " - " & tmp & " not in " & join(expected,","))
    end if
end procedure

test("sprintf1\n","%d",`sprintf("%d",{-10})`,{-10},"-10")
test("sprintf2\n","%.10g",`sprintf("%.10g",{1})`,{1},"1")
test("sprintf3\n","%s\n",`sprintf err 3`,{"Hello Pete"},"Hello Pete\n")
test("sprintf4\n","%f\n",`sprintf err 4`,{10000},"10000.000000\n")

--
--NOTE: This (below) does NOT work on exw (you get ***'s), but is
--      fine on exw with pprntf.e (overriding the builtin), ie
--      "exw t16sprintf.exw" with the following line uncommented
--include ..\builtins\pprntf.e
--      and does NOT work with "exw p.exw -c t28sprntf.exw", but is
--      fine on p.exe [-c] t28sprntf.exw
--      -- Obviously only the last case really matters.
--      -- This behaviour is because Eu holds floats wrong, or 
--      -- at least different to Phix, Fasm, C, and C++.
--      -- This cropped up in the thread "Number Stability With Decimals"
--      -- on EuForum in May 2006, the critical point being the exact
--      -- binary representation of floating point numbers:
--      -- http://openeuphoria.org/forum/16344.wc#16344
--      -- also, see http://openeuphoria.org/forum/16333.wc#16333
--      -- I should actually say that Eu is internally consistent, (as are
--      -- Phix, Fasm, C, and C++) which is /far/ more important than 
--      -- finding the exact same innards when you rip them all open.
--      -- For this reason, "exw.exe -c p.exw" is not supported, instead 
--      -- you should always use "p.exe -c p.exw" (or "p -cp").
--
-- p2js:
--/*
if not equal(sprintf("%f\n",{1e308}),
"10000000000000000000000000000000000000000000000000000000000000000000000000000000"&
"00000000000000000000000000000000000000000000000000000000000000000000000000000000"&
"00000000000000000000000000000000000000000000000000000000000000000000000000000000"&
"000000000000000000000000000000000000000000000000000000000000000000000.000000\n") then
--*/
--constant le308 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000"&
--               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"&
--               "00000000000000000000000000000000000000000000000000000000000000000000000000000000"&
--               "000000000000000000000000000000000000000000000000000000000000000000000.000000\n"
constant le308 = reinstate(repeat('0',317),{1,310,317},"1.\n") -- (all '0' except for 3 chars)
--if le308!=re308 then ?9/0 end if
test("sprintf5\n","%f\n",`sprintf err 5`,{1e308},{le308,"1e+308\n"})
--
-- exw (using exw's built-in sprintf) gives:
--********************************************************************************
--********************************************************************************
--********************************************************************************
--***************
-- exw p.exw -c would (were it supported) give:
--10000000000000005987520928604159705884839972435133822044844502930639940850633358
--45854345595225877703832348631167195447619676160612367393595349378653275598665760
--69494316010985861775270129154309786903198517588510859178193472645986181936458818
--702991881987565141801309254969499456218727226289859066665599766626304.000000

-- 64-bit Phix gives: [FIXED]
--1000000000000000008575876330031999210253739322195686619209876105120743696503959710424676161223896295640900620327732128489697429107699361158748821
--5056779137194961885261941290251052488091625522111060836699732178726209915193827269298845558473247596970733163696067621662592402346165642203335694
--9445092921122099453.219648

--
-- I think I know which of the three I prefer ;-))
--
-- I should of course point out that the latter is actually better than 99.999999%
-- accurate and perfectly good enough for all practical purposes.
--
-- pwa/p2js: generates "1e+308\n", technically wrong but good enough for me.
--  (JavaScript's Number.prototype.toFixed() cops out on numbers >= 1e21, which is 
--   reasonable, not that repeated /10 and bolting on repeat('0',k) would be hard.)
--
test("sprintf6\n","%e\n",`sprintf err 6`,{1e308},"1.000000e+308\n")
test("sprintf7\n","%8.0f\n",`sprintf err 7`,{0.678},"       1\n")
test("sprintf8\n","%8.0f\n",`sprintf err 8`,{11.67},"      12\n")
test("sprintf9\n","%8.2f\n",`sprintf err 9`,{12345.678},"12345.68\n")
test("sprintf10\n","x%sy\n",`sprintf err 10`,{"fred"},"xfredy\n")
test("sprintf11\n","%d\n",`sprintf err 11`,{17},"17\n")
test("sprintf12\n","%04x\n",`sprintf err 12`,{#ABC},"0ABC\n")
test("sprintf13\n","%04X\n",`sprintf err 13`,{#ABC},"0abc\n")
test("sprintf14\n","1 %d 1.0 %1.1f 0.0 %1.1f x %s\n",`sprintf err 14`,{1,1,0,"x"},"1 1 1.0 1.0 0.0 0.0 x x\n")
test("sprintf15\n","%f\n",`sprintf err 15`,{1/3},"0.333333\n")
test("sprintf16\n","%f\n",`sprintf err 16`,{4503599627370495},"4503599627370495.000000\n")
test("sprintf17\n","%7.2f",`sprintf err 17`,0.000015,"   0.00")
test("sprintf18\n","%7.2f",`sprintf err 18`,0.005,{"   0.00","   0.01"})
test("sprintf19\n","%7.2f",`sprintf err 19`,0.015,{"   0.02","   0.01"})
test("sprintf20\n","%7.2f",`sprintf err 20`,0.0151,"   0.02")
test("sprintf21\n","%7.2f",`sprintf err 21`,35.855,"  35.85")
test("sprintf22\n","%7.2f",`sprintf err 22`,35.755,"  35.76")
test("sprintf23\n","%7.2f",`sprintf err 23`,1.005,"   1.00")
test("sprintf24\n","%7.2f",`sprintf err 24`,1.015,"   1.01")
--?sprintf("%7.2f",35.855)
--?sprintf("%7.2f",35.755)
--?sprintf("%7.2f",1.005)
--?sprintf("%7.2f",1.015)
--/*
--"  35.85"
--"  35.76"
--"   1.00"
--"   1.01"
--*/
test("sprintf25\n","true:%t, false:%t\n",`sprintf err 25`,{true,false},"true:true, false:false\n")

--if getc(0) then end if
